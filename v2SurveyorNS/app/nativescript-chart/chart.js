"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var layout = require("ui/layouts/grid-layout");
var page;
var ele = [];
var maxEle;
var minEle;
var targetEle;
var prevIndex;
var smoothingRange; // when there is a data skip in the azimuth, we want to smooth it out linearly. This is the max range of the smoothing. Any jumps more than 20 will not be smoothed
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    maxEle = 60;
    minEle = 0;
    targetEle = 40;
    smoothingRange = 20;
    page.getViewById("graph").height = maxHeight;
    var ltarget = page.getViewById("ltarget");
    ltarget.height = width;
    ltarget.translateY = -maxHeight * ele2Percent(targetEle);
    for (var i = 0; i < 360; i++) {
        ele.push((maxEle + minEle) / 2);
        page.getViewById("l" + i).height = maxHeight * ele2Percent(ele[i]);
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation, isOn) {
    var az = Math.floor(azimuth) + 180;
    layout.GridLayout.setColumn(page.getViewById("lcursor"), az);
    if (isOn) {
        ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
        var currentView = page.getViewById("l" + az);
        currentView.height = maxHeight * ele2Percent(ele[az]);
        var dif = az - prevIndex;
        if (Math.abs(dif) > 1 && Math.abs(dif) < smoothingRange) {
            var start = void 0, end = void 0;
            if (dif > 0) {
                start = prevIndex + 1;
                end = az;
            }
            else {
                start = az + 1;
                end = prevIndex;
            }
            for (var i = start; i < end; i++) {
                ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
                page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
            }
        }
        prevIndex = az;
    }
}
exports.updateGraph = updateGraph;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUdyQywrQ0FBaUQ7QUFFakQsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7QUFFekIsSUFBSSxNQUFjLENBQUM7QUFDbkIsSUFBSSxNQUFjLENBQUM7QUFDbkIsSUFBSSxTQUFpQixDQUFDO0FBQ3RCLElBQUksU0FBaUIsQ0FBQztBQUN0QixJQUFJLGNBQXNCLENBQUMsQ0FBQyxtS0FBbUs7QUFFL0wsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBQ3RHLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtBQUV6RyxtQkFBMEIsTUFBTTtJQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQzdDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxD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QUFNLEdBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVEO0FBQ0EsQ0FBQztBQURELHdCQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSBcInBsYXRmb3JtXCI7XG5pbXBvcnQgKiBhcyBrbm93bkNvbG9ycyBmcm9tIFwiY29sb3Iva25vd24tY29sb3JzXCI7XG5pbXBvcnQgKiBhcyBJbWFnZU1vZHVsZSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZVwiO1xuaW1wb3J0ICogYXMgbGF5b3V0IGZyb20gXCJ1aS9sYXlvdXRzL2dyaWQtbGF5b3V0XCI7XG5cbmxldCBwYWdlO1xuY29uc3QgZWxlOiBudW1iZXJbXSA9IFtdO1xuXG5sZXQgbWF4RWxlOiBudW1iZXI7XG5sZXQgbWluRWxlOiBudW1iZXI7XG5sZXQgdGFyZ2V0RWxlOiBudW1iZXI7XG5sZXQgcHJldkluZGV4OiBudW1iZXI7XG5sZXQgc21vb3RoaW5nUmFuZ2U6IG51bWJlcjsgLy8gd2hlbiB0aGVyZSBpcyBhIGRhdGEgc2tpcCBpbiB0aGUgYXppbXV0aCwgd2Ugd2FudCB0byBzbW9vdGggaXQgb3V0IGxpbmVhcmx5LiBUaGlzIGlzIHRoZSBtYXggcmFuZ2Ugb2YgdGhlIHNtb290aGluZy4gQW55IGp1bXBzIG1vcmUgdGhhbiAyMCB3aWxsIG5vdCBiZSBzbW9vdGhlZFxuXG5jb25zdCB3aWR0aCA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLndpZHRoUGl4ZWxzIC8gMzYwIC9wbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5zY2FsZTsgLy8gaW4gZHBcbmNvbnN0IG1heEhlaWdodCA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyAvIDggL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlOyAvLyBpbiBkcFxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEdyYXBoKG15UGFnZSkge1xuICBjb25zb2xlLmxvZyhcIkVudGVyaW5nIGluaXRHcmFwaFwiKTtcbiAgcGFnZSA9IG15UGFnZTtcbiAgbWF4RWxlID0gNjA7XG4gIG1pbkVsZSA9IDA7XG4gIHRhcmdldEVsZSA9IDQwO1xuICBzbW9vdGhpbmdSYW5nZSA9IDIwO1xuICBwYWdlLmdldFZpZXdCeUlkKFwiZ3JhcGhcIikuaGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICBjb25zdCBsdGFyZ2V0ID0gcGFnZS5nZXRWaWV3QnlJZChcImx0YXJnZXRcIik7XG4gIGx0YXJnZXQuaGVpZ2h0ID0gd2lkdGg7XG4gIGx0YXJnZXQudHJhbnNsYXRlWSA9IC1tYXhIZWlnaHQgKiBlbGUyUGVyY2VudCh0YXJnZXRFbGUpO1xuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCAzNjA7IGkrKykge1xuICAgIGVsZS5wdXNoKChtYXhFbGUrIG1pbkVsZSkvMik7XG4gICAgcGFnZS5nZXRWaWV3QnlJZChcImxcIitpKS5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbaV0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVHcmFwaChhemltdXRoLCBlbGV2YXRpb24sIGlzT24pIHtcbiAgY29uc3QgYXogPSBNYXRoLmZsb29yKGF6aW11dGgpICsgMTgwO1xuICBsYXlvdXQuR3JpZExheW91dC5zZXRDb2x1bW4ocGFnZS5nZXRWaWV3QnlJZChcImxjdXJzb3JcIiksIGF6KTtcbiAgaWYoaXNPbil7XG4gICAgZWxlW2F6XSA9IC1lbGV2YXRpb248bWluRWxlPyBtaW5FbGU6IC1lbGV2YXRpb24+bWF4RWxlPyBtYXhFbGU6IC1lbGV2YXRpb247XG5cbiAgICBjb25zdCBjdXJyZW50VmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrYXopO1xuICAgIGN1cnJlbnRWaWV3LmhlaWdodCA9IG1heEhlaWdodCAqIGVsZTJQZXJjZW50KGVsZVthel0pO1xuXG4gICAgY29uc3QgZGlmID0gYXotcHJldkluZGV4O1xuICAgIGlmKE1hdGguYWJzKGRpZikgPiAxICYmIE1hdGguYWJzKGRpZikgPCBzbW9vdGhpbmdSYW5nZSkge1xuICAgICAgbGV0IHN0YXJ0LCBlbmQ7XG4gICAgICBpZihkaWYgPiAwKSB7XG4gICAgICAgIHN0YXJ0ID0gcHJldkluZGV4ICsgMTtcbiAgICAgICAgZW5kID0gYXo7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IGF6ICsgMTtcbiAgICAgICAgZW5kID0gcHJldkluZGV4O1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgZWxlW2ldID0gZWxlW3N0YXJ0LTFdICsgKGkgLSBzdGFydCsxKSAvIChkaWYtMSkgKiAoZWxlW2F6XS1lbGVbcHJldkluZGV4XSk7XG4gICAgICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrKGkpKS5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2SW5kZXggPSBhejtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbGUyUGVyY2VudChlbGV2YXRpb24pIHtcbiAgcmV0dXJuIChlbGV2YXRpb24gLSBtaW5FbGUpLyhtYXhFbGUtbWluRWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uRXhpdCgpIHtcbn1cbiJdfQ==