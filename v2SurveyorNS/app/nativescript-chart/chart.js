"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var page;
var ele = [];
var maxEle;
var minEle;
var timer;
var prevIndex;
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    maxEle = 60;
    minEle = 0;
    timer = 10;
    page.getViewById("graph").height = maxHeight;
    for (var i = 0; i < 360; i++) {
        console.log("dealing with: " + i);
        ele.push((maxEle + minEle) / 2);
        var heightPercent = (ele[i] - minEle) / (maxEle - minEle);
        page.getViewById("l" + i).height = maxHeight;
        // page.addCss("#l" + i + " {height: " + heightPercent*maxHeight + "}");
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation) {
    var az = Math.floor(azimuth) + 180;
    ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
    var currentView = page.getViewById("l" + az);
    currentView.height = maxHeight * ele2Percent(ele[az]);
    var dif = az - prevIndex;
    if (Math.abs(dif) > 1 && Math.abs(dif) < 90) {
        console.log("dif is " + dif);
        var start = void 0, end = void 0;
        if (dif > 0) {
            start = prevIndex + 1;
            end = az;
        }
        else {
            start = az + 1;
            end = prevIndex;
        }
        console.log("startxend is " + start + " x " + end + " with eles" + ele[start - 1] + " x " + ele[end]);
        for (var i = start; i < end; i++) {
            ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
            console.log("average nums are: " + ele[i]);
            page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
        }
    }
    prevIndex = az;
}
exports.updateGraph = updateGraph;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUlyQyxJQUFJLElBQUksQ0FBQztBQUNULElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztBQUV6QixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLEtBQWEsQ0FBQztBQUNsQixJQUFJLFNBQWlCLENBQUM7QUFFdEIsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBQ3RHLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtBQUV6RyxtQkFBMEIsTUFBTTtJQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUM3QyxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFNLGFBQWEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQzNDLHdFQUF3RTtJQUMxRSxDQUFDO0FBQ0gsQ0FBQztBQWRELDhCQWNDO0FBRUQscUJBQTRCLE9BQU8sRUFBRSxTQUFTO0lBQzVDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3JDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBQyxNQUFNLEdBQUUsTUFBTSxHQUFFLENBQUMsU0FBUyxHQUFDLE1BQU0sR0FBRSxNQUFNLEdBQUUsQ0FBQyxTQUFTLENBQUM7SUFFM0UsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0MsV0FBVyxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQU0sR0FBRyxHQUFHLEVBQUUsR0FBQyxTQUFTLENBQUM7SUFDekIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksS0FBSyxTQUFBLEVBQUUsR0FBRyxTQUFBLENBQUM7UUFDZixFQUFFLENBQUEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEtBQUssR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNmLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDbEIsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLEtBQUssR0FBRSxLQUFLLEdBQUUsR0FBRyxHQUFHLFlBQVksR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFFLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0gsQ0FBQztJQUNELFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQTFCRCxrQ0EwQkM7QUFFRCxxQkFBcUIsU0FBUztJQUM1QixNQUFNLENBQUMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUMsQ0FBQyxNQUFNLEdBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVEO0FBQ0EsQ0FBQztBQURELHdCQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSBcInBsYXRmb3JtXCI7XHJcbmltcG9ydCAqIGFzIGtub3duQ29sb3JzIGZyb20gXCJjb2xvci9rbm93bi1jb2xvcnNcIjtcclxuaW1wb3J0ICogYXMgSW1hZ2VNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvaW1hZ2VcIjtcclxuXHJcbmxldCBwYWdlO1xyXG5jb25zdCBlbGU6IG51bWJlcltdID0gW107XHJcblxyXG5sZXQgbWF4RWxlOiBudW1iZXI7XHJcbmxldCBtaW5FbGU6IG51bWJlcjtcclxubGV0IHRpbWVyOiBudW1iZXI7XHJcbmxldCBwcmV2SW5kZXg6IG51bWJlcjtcclxuXHJcbmNvbnN0IHdpZHRoID0gcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4ud2lkdGhQaXhlbHMgLyAzNjAgL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlOyAvLyBpbiBkcFxyXG5jb25zdCBtYXhIZWlnaHQgPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5oZWlnaHRQaXhlbHMgLyA4IC9wbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5zY2FsZTsgLy8gaW4gZHBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0R3JhcGgobXlQYWdlKSB7XHJcbiAgY29uc29sZS5sb2coXCJFbnRlcmluZyBpbml0R3JhcGhcIik7XHJcbiAgcGFnZSA9IG15UGFnZTtcclxuICBtYXhFbGUgPSA2MDtcclxuICBtaW5FbGUgPSAwO1xyXG4gIHRpbWVyID0gMTA7XHJcbiAgcGFnZS5nZXRWaWV3QnlJZChcImdyYXBoXCIpLmhlaWdodCA9IG1heEhlaWdodDtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgMzYwOyBpKyspIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVhbGluZyB3aXRoOiBcIisgaSk7XHJcbiAgICBlbGUucHVzaCgobWF4RWxlKyBtaW5FbGUpLzIpO1xyXG4gICAgY29uc3QgaGVpZ2h0UGVyY2VudCA9IChlbGVbaV0gLSBtaW5FbGUpLyhtYXhFbGUgLSBtaW5FbGUpO1xyXG4gICAgcGFnZS5nZXRWaWV3QnlJZChcImxcIitpKS5oZWlnaHQgPSBtYXhIZWlnaHQ7XHJcbiAgICAvLyBwYWdlLmFkZENzcyhcIiNsXCIgKyBpICsgXCIge2hlaWdodDogXCIgKyBoZWlnaHRQZXJjZW50Km1heEhlaWdodCArIFwifVwiKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVHcmFwaChhemltdXRoLCBlbGV2YXRpb24pIHtcclxuICBjb25zdCBheiA9IE1hdGguZmxvb3IoYXppbXV0aCkgKyAxODA7XHJcbiAgZWxlW2F6XSA9IC1lbGV2YXRpb248bWluRWxlPyBtaW5FbGU6IC1lbGV2YXRpb24+bWF4RWxlPyBtYXhFbGU6IC1lbGV2YXRpb247XHJcblxyXG4gIGNvbnN0IGN1cnJlbnRWaWV3ID0gcGFnZS5nZXRWaWV3QnlJZChcImxcIitheik7XHJcbiAgY3VycmVudFZpZXcuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2F6XSk7XHJcblxyXG4gIGNvbnN0IGRpZiA9IGF6LXByZXZJbmRleDtcclxuICBpZihNYXRoLmFicyhkaWYpID4gMSAmJiBNYXRoLmFicyhkaWYpIDwgOTApIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGlmIGlzIFwiICsgZGlmKTtcclxuICAgIGxldCBzdGFydCwgZW5kO1xyXG4gICAgaWYoZGlmID4gMCkge1xyXG4gICAgICBzdGFydCA9IHByZXZJbmRleCArIDE7XHJcbiAgICAgIGVuZCA9IGF6O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhcnQgPSBheiArIDE7XHJcbiAgICAgIGVuZCA9IHByZXZJbmRleDtcclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFwic3RhcnR4ZW5kIGlzIFwiICsgc3RhcnQrIFwiIHggXCIrIGVuZCArIFwiIHdpdGggZWxlc1wiICsgZWxlW3N0YXJ0LTFdICtcIiB4IFwiICsgZWxlW2VuZF0pO1xyXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcclxuICAgICAgZWxlW2ldID0gZWxlW3N0YXJ0LTFdICsgKGkgLSBzdGFydCsxKSAvIChkaWYtMSkgKiAoZWxlW2F6XS1lbGVbcHJldkluZGV4XSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYXZlcmFnZSBudW1zIGFyZTogXCIgKyBlbGVbaV0pO1xyXG4gICAgICBwYWdlLmdldFZpZXdCeUlkKFwibFwiKyhpKSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJldkluZGV4ID0gYXo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZTJQZXJjZW50KGVsZXZhdGlvbikge1xyXG4gIHJldHVybiAoZWxldmF0aW9uIC0gbWluRWxlKS8obWF4RWxlLW1pbkVsZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkV4aXQoKSB7XHJcbn1cclxuIl19