"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var isStart = false;
var isEleAbove0 = false;
var isPressed = false;
var largeDeltaAz = false;
var oldAz = 0;
var page;
var pt1, pt2, pt3, pt4;
var translateY = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale;
function trigger1(mPage) {
    if (!isStart) {
        page = mPage;
        pt1 = page.getViewById("pt1");
        pt2 = page.getViewById("pt2");
        pt3 = page.getViewById("pt3");
        pt4 = page.getViewById("pt4");
        pt1.translateY = translateY;
        pt2.translateY = translateY;
        pt3.translateY = translateY;
        pt4.translateY = translateY;
    }
}
exports.trigger1 = trigger1;
function trigger2(ele) {
    if (!isEleAbove0) {
        isEleAbove0 = -ele > 0;
        if (isEleAbove0) {
            fadeaway(pt1, pt2);
        }
    }
}
exports.trigger2 = trigger2;
function trigger3(az) {
    if (!isPressed) {
        fadeaway(pt2, pt3);
    }
    oldAz = az;
    isPressed = true;
}
exports.trigger3 = trigger3;
function trigger4(az) {
    if (!largeDeltaAz && isPressed) {
        largeDeltaAz = Math.abs(oldAz - az) > 20;
        if (largeDeltaAz) {
            end(pt3, pt4);
        }
    }
}
exports.trigger4 = trigger4;
function fadeaway(oldView, newView) {
    return oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 1000
        });
    });
}
function end(oldView, newView) {
    oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 2000
        }).then(function () {
            newView.animate({
                opacity: 0,
                duration: 2000
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdHJ1Y3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBRXJDLElBQUksT0FBTyxHQUFZLEtBQUssQ0FBQztBQUM3QixJQUFJLFdBQVcsR0FBWSxLQUFLLENBQUM7QUFDakMsSUFBSSxTQUFTLEdBQVksS0FBSyxDQUFDO0FBQy9CLElBQUksWUFBWSxHQUFZLEtBQUssQ0FBQztBQUNsQyxJQUFJLEtBQUssR0FBVyxDQUFDLENBQUM7QUFFdEIsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztBQUN2QixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztBQUVqRyxrQkFBeUIsS0FBSztJQUM1QixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUM7QUFaRCw0QkFZQztBQUVELGtCQUF5QixHQUFHO0lBQzFCLEVBQUUsQ0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQixXQUFXLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEVBQUUsQ0FBQSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDZixRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQVBELDRCQU9DO0FBRUQsa0JBQXlCLEVBQUU7SUFDekIsRUFBRSxDQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2QsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNYLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQU5ELDRCQU1DO0FBRUQsa0JBQXlCLEVBQUU7SUFDekIsRUFBRSxDQUFBLENBQUMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLENBQUEsQ0FBQztRQUM3QixZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFQRCw0QkFPQztBQUVELGtCQUFrQixPQUFPLEVBQUUsT0FBTztJQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNyQixPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNOLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDZCxPQUFPLEVBQUUsQ0FBQztZQUNWLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsYUFBYSxPQUFPLEVBQUUsT0FBTztJQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2QsT0FBTyxFQUFFLENBQUM7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDTixPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ2QsT0FBTyxFQUFFLENBQUM7WUFDVixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDTixPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkLE9BQU8sRUFBQyxDQUFDO2dCQUNULFFBQVEsRUFBRSxJQUFJO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcclxuXHJcbmxldCBpc1N0YXJ0OiBib29sZWFuID0gZmFsc2U7XHJcbmxldCBpc0VsZUFib3ZlMDogYm9vbGVhbiA9IGZhbHNlO1xyXG5sZXQgaXNQcmVzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbmxldCBsYXJnZURlbHRhQXo6IGJvb2xlYW4gPSBmYWxzZTtcclxubGV0IG9sZEF6OiBudW1iZXIgPSAwO1xyXG5cclxubGV0IHBhZ2U7XHJcbmxldCBwdDEsIHB0MiwgcHQzLCBwdDQ7XHJcbmNvbnN0IHRyYW5zbGF0ZVkgPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5oZWlnaHRQaXhlbHMgLyA4IC9wbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5zY2FsZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyMShtUGFnZSkge1xyXG4gIGlmKCFpc1N0YXJ0KSB7XHJcbiAgICBwYWdlID0gbVBhZ2U7XHJcbiAgICBwdDEgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQxXCIpO1xyXG4gICAgcHQyID0gcGFnZS5nZXRWaWV3QnlJZChcInB0MlwiKTtcclxuICAgIHB0MyA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDNcIik7XHJcbiAgICBwdDQgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQ0XCIpO1xyXG4gICAgcHQxLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQyLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQzLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQ0LnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIyKGVsZSkge1xyXG4gIGlmKCFpc0VsZUFib3ZlMCkge1xyXG4gICAgaXNFbGVBYm92ZTAgPSAtZWxlID4gMDtcclxuICAgIGlmKGlzRWxlQWJvdmUwKSB7XHJcbiAgICAgIGZhZGVhd2F5KHB0MSwgcHQyKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyMyhheikge1xyXG4gIGlmKCFpc1ByZXNzZWQpIHtcclxuICAgIGZhZGVhd2F5KHB0MiwgcHQzKTtcclxuICB9XHJcbiAgb2xkQXogPSBhejtcclxuICBpc1ByZXNzZWQgPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlcjQoYXopIHtcclxuICBpZighbGFyZ2VEZWx0YUF6ICYmIGlzUHJlc3NlZCl7XHJcbiAgICBsYXJnZURlbHRhQXogPSBNYXRoLmFicyhvbGRBei1heikgPiAyMDtcclxuICAgIGlmKGxhcmdlRGVsdGFBeikge1xyXG4gICAgICBlbmQocHQzLCBwdDQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmFkZWF3YXkob2xkVmlldywgbmV3Vmlldykge1xyXG4gIHJldHVybiBvbGRWaWV3LmFuaW1hdGUoe1xyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIGR1cmF0aW9uOiAxMDAwXHJcbiAgfSkudGhlbigoKT0+e1xyXG4gICAgbmV3Vmlldy5hbmltYXRlKHtcclxuICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgZHVyYXRpb246IDEwMDBcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmQob2xkVmlldywgbmV3Vmlldykge1xyXG4gIG9sZFZpZXcuYW5pbWF0ZSh7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgZHVyYXRpb246IDEwMDBcclxuICB9KS50aGVuKCgpID0+e1xyXG4gICAgbmV3Vmlldy5hbmltYXRlKHtcclxuICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgZHVyYXRpb246IDIwMDBcclxuICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICBuZXdWaWV3LmFuaW1hdGUoe1xyXG4gICAgICAgIG9wYWNpdHk6MCxcclxuICAgICAgICBkdXJhdGlvbjogMjAwMFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbiJdfQ==