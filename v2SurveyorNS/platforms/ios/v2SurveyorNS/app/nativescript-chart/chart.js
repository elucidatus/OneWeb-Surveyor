"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var page;
var ele = [];
var maxEle;
var minEle;
var targetEle;
var prevIndex;
var smoothingRange; // when there is a data skip in the azimuth, we want to smooth it out linearly. This is the max range of the smoothing. Any jumps more than 20 will not be smoothed
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    maxEle = 60;
    minEle = 0;
    targetEle = 40;
    smoothingRange = 20;
    page.getViewById("graph").height = maxHeight;
    var ltarget = page.getViewById("ltarget");
    ltarget.height = width;
    ltarget.translateY = -maxHeight * ele2Percent(targetEle);
    for (var i = 0; i < 360; i++) {
        ele.push((maxEle + minEle) / 2);
        page.getViewById("l" + i).height = maxHeight * ele2Percent(ele[i]);
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation) {
    var az = Math.floor(azimuth) + 180;
    ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
    var currentView = page.getViewById("l" + az);
    currentView.height = maxHeight * ele2Percent(ele[az]);
    var dif = az - prevIndex;
    if (Math.abs(dif) > 1 && Math.abs(dif) < smoothingRange) {
        var start = void 0, end = void 0;
        if (dif > 0) {
            start = prevIndex + 1;
            end = az;
        }
        else {
            start = az + 1;
            end = prevIndex;
        }
        for (var i = start; i < end; i++) {
            ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
            page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
        }
    }
    prevIndex = az;
}
exports.updateGraph = updateGraph;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUlyQyxJQUFJLElBQUksQ0FBQztBQUNULElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztBQUV6QixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLFNBQWlCLENBQUM7QUFDdEIsSUFBSSxTQUFpQixDQUFDO0FBQ3RCLElBQUksY0FBc0IsQ0FBQyxDQUFDLG1LQUFtSztBQUUvTCxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7QUFDdEcsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBRXpHLG1CQUEwQixNQUFNO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNsQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2QsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ2YsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDN0MsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN2QixPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV6RCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUUsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztBQUNILENBQUM7QUFoQkQsOEJBZ0JDO0FBRUQscUJBQTRCLE9BQU8sRUFBRSxTQUFTO0lBQzVDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3JDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBQyxNQUFNLEdBQUUsTUFBTSxHQUFFLENBQUMsU0FBUyxHQUFDLE1BQU0sR0FBRSxNQUFNLEdBQUUsQ0FBQyxTQUFTLENBQUM7SUFFM0UsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0MsV0FBVyxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQU0sR0FBRyxHQUFHLEVBQUUsR0FBQyxTQUFTLENBQUM7SUFDekIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksS0FBSyxTQUFBLEVBQUUsR0FBRyxTQUFBLENBQUM7UUFDZixFQUFFLENBQUEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEtBQUssR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDWCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNmLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDbEIsQ0FBQztRQUNELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzNFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0gsQ0FBQztJQUNELFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQXZCRCxrQ0F1QkM7QUFFRCxxQkFBcUIsU0FBUztJQUM1QixNQUFNLENBQUMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUMsQ0FBQyxNQUFNLEdBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVEO0FBQ0EsQ0FBQztBQURELHdCQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSBcInBsYXRmb3JtXCI7XG5pbXBvcnQgKiBhcyBrbm93bkNvbG9ycyBmcm9tIFwiY29sb3Iva25vd24tY29sb3JzXCI7XG5pbXBvcnQgKiBhcyBJbWFnZU1vZHVsZSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZVwiO1xuXG5sZXQgcGFnZTtcbmNvbnN0IGVsZTogbnVtYmVyW10gPSBbXTtcblxubGV0IG1heEVsZTogbnVtYmVyO1xubGV0IG1pbkVsZTogbnVtYmVyO1xubGV0IHRhcmdldEVsZTogbnVtYmVyO1xubGV0IHByZXZJbmRleDogbnVtYmVyO1xubGV0IHNtb290aGluZ1JhbmdlOiBudW1iZXI7IC8vIHdoZW4gdGhlcmUgaXMgYSBkYXRhIHNraXAgaW4gdGhlIGF6aW11dGgsIHdlIHdhbnQgdG8gc21vb3RoIGl0IG91dCBsaW5lYXJseS4gVGhpcyBpcyB0aGUgbWF4IHJhbmdlIG9mIHRoZSBzbW9vdGhpbmcuIEFueSBqdW1wcyBtb3JlIHRoYW4gMjAgd2lsbCBub3QgYmUgc21vb3RoZWRcblxuY29uc3Qgd2lkdGggPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi53aWR0aFBpeGVscyAvIDM2MCAvcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7IC8vIGluIGRwXG5jb25zdCBtYXhIZWlnaHQgPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5oZWlnaHRQaXhlbHMgLyA4IC9wbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5zY2FsZTsgLy8gaW4gZHBcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRHcmFwaChteVBhZ2UpIHtcbiAgY29uc29sZS5sb2coXCJFbnRlcmluZyBpbml0R3JhcGhcIik7XG4gIHBhZ2UgPSBteVBhZ2U7XG4gIG1heEVsZSA9IDYwO1xuICBtaW5FbGUgPSAwO1xuICB0YXJnZXRFbGUgPSA0MDtcbiAgc21vb3RoaW5nUmFuZ2UgPSAyMDtcbiAgcGFnZS5nZXRWaWV3QnlJZChcImdyYXBoXCIpLmhlaWdodCA9IG1heEhlaWdodDtcbiAgY29uc3QgbHRhcmdldCA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJsdGFyZ2V0XCIpO1xuICBsdGFyZ2V0LmhlaWdodCA9IHdpZHRoO1xuICBsdGFyZ2V0LnRyYW5zbGF0ZVkgPSAtbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQodGFyZ2V0RWxlKTtcblxuICBmb3IobGV0IGkgPSAwOyBpIDwgMzYwOyBpKyspIHtcbiAgICBlbGUucHVzaCgobWF4RWxlKyBtaW5FbGUpLzIpO1xuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIraSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlR3JhcGgoYXppbXV0aCwgZWxldmF0aW9uKSB7XG4gIGNvbnN0IGF6ID0gTWF0aC5mbG9vcihhemltdXRoKSArIDE4MDtcbiAgZWxlW2F6XSA9IC1lbGV2YXRpb248bWluRWxlPyBtaW5FbGU6IC1lbGV2YXRpb24+bWF4RWxlPyBtYXhFbGU6IC1lbGV2YXRpb247XG5cbiAgY29uc3QgY3VycmVudFZpZXcgPSBwYWdlLmdldFZpZXdCeUlkKFwibFwiK2F6KTtcbiAgY3VycmVudFZpZXcuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2F6XSk7XG5cbiAgY29uc3QgZGlmID0gYXotcHJldkluZGV4O1xuICBpZihNYXRoLmFicyhkaWYpID4gMSAmJiBNYXRoLmFicyhkaWYpIDwgc21vb3RoaW5nUmFuZ2UpIHtcbiAgICBsZXQgc3RhcnQsIGVuZDtcbiAgICBpZihkaWYgPiAwKSB7XG4gICAgICBzdGFydCA9IHByZXZJbmRleCArIDE7XG4gICAgICBlbmQgPSBhejtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSBheiArIDE7XG4gICAgICBlbmQgPSBwcmV2SW5kZXg7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBlbGVbaV0gPSBlbGVbc3RhcnQtMV0gKyAoaSAtIHN0YXJ0KzEpIC8gKGRpZi0xKSAqIChlbGVbYXpdLWVsZVtwcmV2SW5kZXhdKTtcbiAgICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrKGkpKS5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbaV0pO1xuICAgIH1cbiAgfVxuICBwcmV2SW5kZXggPSBhejtcbn1cblxuZnVuY3Rpb24gZWxlMlBlcmNlbnQoZWxldmF0aW9uKSB7XG4gIHJldHVybiAoZWxldmF0aW9uIC0gbWluRWxlKS8obWF4RWxlLW1pbkVsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkV4aXQoKSB7XG59XG4iXX0=