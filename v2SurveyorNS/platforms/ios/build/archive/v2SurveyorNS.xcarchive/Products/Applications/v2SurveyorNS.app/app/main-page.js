/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your page’s data binding.
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var cameraPreview = require("./nativescript-camera-preview/nativescript-camera-preview");
var rotVector = require("./nativescript-rotation-vector/index");
var app = require("application");
var platform = require("platform");
var orientation = require("nativescript-screen-orientation");
var params = require("./nativescript-fov/nativescript-fov");
var permissions = require("nativescript-permissions");
var crosshair;
var doubleline;
var upperText;
var lowerText;
var x, y, z;
var measuredWidth;
var page;
var OUTER_CIRCLE_DIAMETER = 2;
var ANGLE_BETWEEN_LINES = 10;
function showSideDrawer(args) {
    console.log("Show SideDrawer tapped.");
}
exports.showSideDrawer = showSideDrawer;
//TODO: split up the code
function onLoaded(args) {
    orientation.setCurrentOrientation("portrait", function () { });
    if (app.android && platform.device.sdkVersion >= '21') {
        var View = android.view.View;
        var window_1 = app.android.startActivity.getWindow();
        // set the status bar to Color.Transparent
        window_1.setStatusBarColor(0x000000);
        var decorView = window_1.getDecorView();
        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
            | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
    }
    cameraPreview.onLoaded(args, "placeholder-view");
    rotVector.startRotUpdates(function (data) {
        // console.log("x: " + data.x + " y: " + data.y + " z: " + data.z);
        x = data.x;
        y = data.y;
        z = data.z;
    }, { sensorDelay: "game" });
}
exports.onLoaded = onLoaded;
function onCreatingView(args) {
    permissions.requestPermission(android["Manifest"].permission.CAMERA, "I need these permissions for the viewfinder")
        .then(function () {
        console.log("Woo Hoo, I have the power!");
    })
        .catch(function () {
        console.log("Uh oh, no permissions - plan B time!");
    });
    params.initialize();
    cameraPreview.onCreatingView(function () {
        var scaleCrosshair = params.degrees2Scale(OUTER_CIRCLE_DIAMETER, crosshair.getMeasuredHeight());
        crosshair.animate({
            scale: {
                x: scaleCrosshair,
                y: scaleCrosshair
            },
            rotate: -z,
            duration: 0
        });
        var scaleDoubleLine = params.degrees2Scale(ANGLE_BETWEEN_LINES, doubleline.getMeasuredHeight());
        var distanceFromCenter = params.pixels2Dp((params.degrees2Pixels((-y % ANGLE_BETWEEN_LINES)
            - ANGLE_BETWEEN_LINES / 2 * (y > 0 ? -1 : 1))));
        lowerText.text = 10 * Math.floor(-y / 10);
        upperText.text = 10 * Math.floor((-y + 10) / 10);
        doubleline.animate({
            scale: {
                x: scaleDoubleLine,
                y: scaleDoubleLine
            },
            translate: {
                x: Math.sin(z * Math.PI / 180) * distanceFromCenter,
                y: Math.cos(z * Math.PI / 180) * distanceFromCenter
            },
            rotate: -z,
            duration: 0
        });
        lowerText.animate({
            translate: {
                x: Math.sin(z * Math.PI / 180) * (distanceFromCenter + scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)),
                y: Math.cos(z * Math.PI / 180) * (distanceFromCenter + scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2))
            },
            rotate: -z,
            duration: 0
        });
        upperText.animate({
            translate: {
                x: Math.sin(z * Math.PI / 180) * (distanceFromCenter - scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)),
                y: Math.cos(z * Math.PI / 180) * (distanceFromCenter - scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2))
            },
            rotate: -z,
            duration: 0
        });
    }, args);
    var maxSize = cameraPreview.getMaxSize();
    params.setVars(maxSize[0], maxSize[1]);
    measuredWidth = params.degrees2Pixels(OUTER_CIRCLE_DIAMETER);
    console.log(params.getVerticalFOV() + " " + params.getHorizontalFOV());
}
exports.onCreatingView = onCreatingView;
function onTakeShot(args) {
    cameraPreview.onTakeShot(args);
    console.log("el: " + y);
}
exports.onTakeShot = onTakeShot;
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    /*
    This gets a reference this page’s <Page> UI component. You can
    view the API reference of the Page to see what’s available at
    https://docs.nativescript.org/api-reference/classes/_ui_page_.page.html
    */
    page = args.object;
    crosshair = page.getViewById("crosshair");
    doubleline = page.getViewById("doubleline");
    upperText = page.getViewById("upperText");
    lowerText = page.getViewById("lowerText");
    /*
    A page’s bindingContext is an object that should be used to perform
    data binding between XML markup and TypeScript code. Properties
    on the bindingContext can be accessed using the {{ }} syntax in XML.
    In this example, the {{ message }} and {{ onTap }} bindings are resolved
    against the object returned by createViewModel().


    You can learn more about data binding in NativeScript at
    https://docs.nativescript.org/core-concepts/data-binding.
    */
    page.bindingContext = new main_view_model_1.HelloWorldModel();
}
exports.navigatingTo = navigatingTo;
//TODO: Camera onResume, when it's lost. FYI: https://docs.nativescript.org/core-concepts/application-lifecycle
app.on(app.resumeEvent, function (args) {
    //onCreatingView(args);
    cameraPreview.onResume();
});
app.on(app.suspendEvent, function (args) {
    cameraPreview.onPause();
    rotVector.stopRotUpdates();
});
app.on(app.exitEvent, function (args) {
    rotVector.stopRotUpdates();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUU7OztBQUlGLHFEQUFvRDtBQUNwRCx5RkFBMkY7QUFDM0YsZ0VBQWtFO0FBQ2xFLGlDQUFtQztBQUduQyxtQ0FBcUM7QUFDckMsNkRBQStEO0FBQy9ELDREQUE4RDtBQUM5RCxzREFBd0Q7QUFFeEQsSUFBSSxTQUFjLENBQUM7QUFDbkIsSUFBSSxVQUFlLENBQUM7QUFDcEIsSUFBSSxTQUFjLENBQUM7QUFDbkIsSUFBSSxTQUFjLENBQUM7QUFDbkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNaLElBQUksYUFBYSxDQUFDO0FBQ2xCLElBQUksSUFBSSxDQUFDO0FBRVQsSUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7QUFDaEMsSUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFFL0Isd0JBQStCLElBQWU7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFGRCx3Q0FFQztBQUVELHlCQUF5QjtBQUN6QixrQkFBeUIsSUFBZTtJQUN0QyxXQUFXLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLGNBQU8sQ0FBQyxDQUFDLENBQUM7SUFDeEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQU0sSUFBSSxHQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQU0sUUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3JELDBDQUEwQztRQUMxQyxRQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsSUFBTSxTQUFT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QUFXLEVBQUUsVUFBUyxJQUFJO0lBQ25DLHVCQUF1QjtJQUN2QixhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBUyxJQUFJO0lBQ3BDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBUyxJQUFJO0lBQ2pDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5JbiBOYXRpdmVTY3JpcHQsIGEgZmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYW4gWE1MIGZpbGUgaXMga25vd24gYXNcbmEgY29kZS1iZWhpbmQgZmlsZS4gVGhlIGNvZGUtYmVoaW5kIGlzIGEgZ3JlYXQgcGxhY2UgdG8gcGxhY2UgeW91ciB2aWV3XG5sb2dpYywgYW5kIHRvIHNldCB1cCB5b3VyIHBhZ2XigJlzIGRhdGEgYmluZGluZy5cbiovXG5cbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgeyBIZWxsb1dvcmxkTW9kZWwgfSBmcm9tICcuL21haW4tdmlldy1tb2RlbCc7XG5pbXBvcnQgKiBhcyBjYW1lcmFQcmV2aWV3IGZyb20gJy4vbmF0aXZlc2NyaXB0LWNhbWVyYS1wcmV2aWV3L25hdGl2ZXNjcmlwdC1jYW1lcmEtcHJldmlldyc7XG5pbXBvcnQgKiBhcyByb3RWZWN0b3IgZnJvbSBcIi4vbmF0aXZlc2NyaXB0LXJvdGF0aW9uLXZlY3Rvci9pbmRleFwiO1xuaW1wb3J0ICogYXMgYXBwIGZyb20gXCJhcHBsaWNhdGlvblwiO1xuaW1wb3J0ICogYXMgZnJhbWVNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWVcIjtcbmltcG9ydCAqIGFzIGFuaW1hdGlvbiBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9hbmltYXRpb25cIjtcbmltcG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gXCJwbGF0Zm9ybVwiO1xuaW1wb3J0ICogYXMgb3JpZW50YXRpb24gZnJvbSBcIm5hdGl2ZXNjcmlwdC1zY3JlZW4tb3JpZW50YXRpb25cIjtcbmltcG9ydCAqIGFzIHBhcmFtcyBmcm9tIFwiLi9uYXRpdmVzY3JpcHQtZm92L25hdGl2ZXNjcmlwdC1mb3ZcIjtcbmltcG9ydCAqIGFzIHBlcm1pc3Npb25zIGZyb20gXCJuYXRpdmVzY3JpcHQtcGVybWlzc2lvbnNcIjtcblxubGV0IGNyb3NzaGFpciA6YW55O1xubGV0IGRvdWJsZWxpbmUgOmFueTtcbmxldCB1cHBlclRleHQgOmFueTtcbmxldCBsb3dlclRleHQgOmFueTtcbmxldCB4LCB5LCB6O1xubGV0IG1lYXN1cmVkV2lkdGg7XG5sZXQgcGFnZTtcblxuY29uc3QgT1VURVJfQ0lSQ0xFX0RJQU1FVEVSID0gMjtcbmNvbnN0IEFOR0xFX0JFVFdFRU5fTElORVMgPSAxMDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dTaWRlRHJhd2VyKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnNvbGUubG9nKFwiU2hvdyBTaWRlRHJhd2VyIHRhcHBlZC5cIik7XG59XG5cbi8vVE9ETzogc3BsaXQgdXAgdGhlIGNvZGVcbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgb3JpZW50YXRpb24uc2V0Q3VycmVudE9yaWVudGF0aW9uKFwicG9ydHJhaXRcIiwgKCkgPT4ge30pO1xuICBpZiAoYXBwLmFuZHJvaWQgJiYgcGxhdGZvcm0uZGV2aWNlLnNka1ZlcnNpb24gPj0gJzIxJykge1xuICAgICAgY29uc3QgVmlldyA6YW55ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgICBjb25zdCB3aW5kb3cgPSBhcHAuYW5kcm9pZC5zdGFydEFjdGl2aXR5LmdldFdpbmRvdygpO1xuICAgICAgLy8gc2V0IHRoZSBzdGF0dXMgYmFyIHRvIENvbG9yLlRyYW5zcGFyZW50XG4gICAgICB3aW5kb3cuc2V0U3RhdHVzQmFyQ29sb3IoMHgwMDAwMDApO1xuICAgICAgY29uc3QgZGVjb3JWaWV3ID0gd2luZG93LmdldERlY29yVmlldygpO1xuICAgICAgZGVjb3JWaWV3LnNldFN5c3RlbVVpVmlzaWJpbGl0eShcbiAgICAgICAgICBWaWV3LlNZU1RFTV9VSV9GTEFHX0xBWU9VVF9TVEFCTEVcbiAgICAgICAgICB8IFZpZXcuU1lTVEVNX1VJX0ZMQUdfTEFZT1VUX0hJREVfTkFWSUdBVElPTlxuICAgICAgICAgIHwgVmlldy5TWVNURU1fVUlfRkxBR19MQVlPVVRfRlVMTFNDUkVFTlxuICAgICAgICAgIHwgVmlldy5TWVNURU1fVUlfRkxBR19ISURFX05BVklHQVRJT04gLy8gaGlkZSBuYXYgYmFyXG4gICAgICAgICAgfCBWaWV3LlNZU1RFTV9VSV9GTEFHX0ZVTExTQ1JFRU4gLy8gaGlkZSBzdGF0dXMgYmFyXG4gICAgICAgICAgfCBWaWV3LlNZU1RFTV9VSV9GTEFHX0lNTUVSU0lWRV9TVElDS1kpO1xuICB9XG4gIGNhbWVyYVByZXZpZXcub25Mb2FkZWQoYXJncywgXCJwbGFjZWhvbGRlci12aWV3XCIpO1xuXG5cbiAgcm90VmVjdG9yLnN0YXJ0Um90VXBkYXRlcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcIng6IFwiICsgZGF0YS54ICsgXCIgeTogXCIgKyBkYXRhLnkgKyBcIiB6OiBcIiArIGRhdGEueik7XG4gICAgICB4ID0gZGF0YS54O1xuICAgICAgeSA9IGRhdGEueTtcbiAgICAgIHogPSBkYXRhLno7XG4gIH0sICB7IHNlbnNvckRlbGF5OiBcImdhbWVcIiB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uQ3JlYXRpbmdWaWV3KGFyZ3M6IEV2ZW50RGF0YSkge1xuICBwZXJtaXNzaW9ucy5yZXF1ZXN0UGVybWlzc2lvbihhbmRyb2lkW1wiTWFuaWZlc3RcIl0ucGVybWlzc2lvbi5DQU1FUkEsIFwiSSBuZWVkIHRoZXNlIHBlcm1pc3Npb25zIGZvciB0aGUgdmlld2ZpbmRlclwiKVxuICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgY29uc29sZS5sb2coXCJXb28gSG9vLCBJIGhhdmUgdGhlIHBvd2VyIVwiKTtcbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgICBjb25zb2xlLmxvZyhcIlVoIG9oLCBubyBwZXJtaXNzaW9ucyAtIHBsYW4gQiB0aW1lIVwiKTtcbiAgfSk7XG4gIHBhcmFtcy5pbml0aWFsaXplKCk7XG4gIGNhbWVyYVByZXZpZXcub25DcmVhdGluZ1ZpZXcoZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc2NhbGVDcm9zc2hhaXIgPSBwYXJhbXMuZGVncmVlczJTY2FsZShPVVRFUl9DSVJDTEVfRElBTUVURVIsIGNyb3NzaGFpci5nZXRNZWFzdXJlZEhlaWdodCgpKTtcbiAgICBjcm9zc2hhaXIuYW5pbWF0ZSh7XG4gICAgICBzY2FsZToge1xuICAgICAgICB4OiBzY2FsZUNyb3NzaGFpcixcbiAgICAgICAgeTogc2NhbGVDcm9zc2hhaXJcbiAgICAgIH0sXG4gICAgICByb3RhdGU6IC16LFxuICAgICAgZHVyYXRpb246IDBcbiAgICB9KTtcblxuICAgIGNvbnN0IHNjYWxlRG91YmxlTGluZSA9IHBhcmFtcy5kZWdyZWVzMlNjYWxlKEFOR0xFX0JFVFdFRU5fTElORVMsIGRvdWJsZWxpbmUuZ2V0TWVhc3VyZWRIZWlnaHQoKSk7XG4gICAgY29uc3QgZGlzdGFuY2VGcm9tQ2VudGVyID0gcGFyYW1zLnBpeGVsczJEcCgocGFyYW1zLmRlZ3JlZXMyUGl4ZWxzKCgteSAlIEFOR0xFX0JFVFdFRU5fTElORVMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIEFOR0xFX0JFVFdFRU5fTElORVMvMiAqICh5PjA/IC0xOiAxKSkpKTtcbiAgICBsb3dlclRleHQudGV4dCA9IDEwKiBNYXRoLmZsb29yKC15LzEwKTtcbiAgICB1cHBlclRleHQudGV4dCA9IDEwKiBNYXRoLmZsb29yKCgteSsxMCkvMTApO1xuICAgIGRvdWJsZWxpbmUuYW5pbWF0ZSh7XG4gICAgICBzY2FsZToge1xuICAgICAgICB4OiBzY2FsZURvdWJsZUxpbmUsXG4gICAgICAgIHk6IHNjYWxlRG91YmxlTGluZVxuICAgICAgfSxcbiAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICB4IDogTWF0aC5zaW4oeipNYXRoLlBJLzE4MCkqZGlzdGFuY2VGcm9tQ2VudGVyLFxuICAgICAgICB5OiBNYXRoLmNvcyh6Kk1hdGguUEkvMTgwKSpkaXN0YW5jZUZyb21DZW50ZXJcbiAgICAgIH0sXG5cbiAgICAgIHJvdGF0ZTogLXosXG4gICAgICBkdXJhdGlvbjogMFxuICAgIH0pO1xuICAgIGxvd2VyVGV4dC5hbmltYXRlKHtcbiAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICB4IDogTWF0aC5zaW4oeipNYXRoLlBJLzE4MCkqIChkaXN0YW5jZUZyb21DZW50ZXIrc2NhbGVEb3VibGVMaW5lKnBhcmFtcy5kZWdyZWVzMlBpeGVscyhBTkdMRV9CRVRXRUVOX0xJTkVTLzIpKSxcbiAgICAgICAgeSA6IE1hdGguY29zKHoqTWF0aC5QSS8xODApKiAoZGlzdGFuY2VGcm9tQ2VudGVyK3NjYWxlRG91YmxlTGluZSpwYXJhbXMuZGVncmVlczJQaXhlbHMoQU5HTEVfQkVUV0VFTl9MSU5FUy8yKSlcbiAgICAgIH0sXG4gICAgICByb3RhdGU6IC16LFxuICAgICAgZHVyYXRpb246IDBcbiAgICB9KTtcbiAgICB1cHBlclRleHQuYW5pbWF0ZSh7XG4gICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgeCA6ICBNYXRoLnNpbih6Kk1hdGguUEkvMTgwKSogKGRpc3RhbmNlRnJvbUNlbnRlci1zY2FsZURvdWJsZUxpbmUqcGFyYW1zLmRlZ3JlZXMyUGl4ZWxzKEFOR0xFX0JFVFdFRU5fTElORVMvMikpLFxuICAgICAgICB5IDogIE1hdGguY29zKHoqTWF0aC5QSS8xODApKiAoZGlzdGFuY2VGcm9tQ2VudGVyLXNjYWxlRG91YmxlTGluZSpwYXJhbXMuZGVncmVlczJQaXhlbHMoQU5HTEVfQkVUV0VFTl9MSU5FUy8yKSlcbiAgICAgIH0sXG4gICAgICByb3RhdGU6IC16LFxuICAgICAgZHVyYXRpb246IDBcbiAgICB9KTtcblxuICB9LCBhcmdzKTtcbiAgY29uc3QgbWF4U2l6ZSA9IGNhbWVyYVByZXZpZXcuZ2V0TWF4U2l6ZSgpO1xuICBwYXJhbXMuc2V0VmFycyhtYXhTaXplWzBdLCBtYXhTaXplWzFdKTtcbiAgbWVhc3VyZWRXaWR0aCA9IHBhcmFtcy5kZWdyZWVzMlBpeGVscyhPVVRFUl9DSVJDTEVfRElBTUVURVIpO1xuICBjb25zb2xlLmxvZyhwYXJhbXMuZ2V0VmVydGljYWxGT1YoKSArIFwiIFwiICsgcGFyYW1zLmdldEhvcml6b250YWxGT1YoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRha2VTaG90KGFyZ3M6IEV2ZW50RGF0YSkge1xuICBjYW1lcmFQcmV2aWV3Lm9uVGFrZVNob3QoYXJncyk7XG4gIGNvbnNvbGUubG9nKFwiZWw6IFwiICsgeSk7XG59XG5cbi8vIEV2ZW50IGhhbmRsZXIgZm9yIFBhZ2UgXCJuYXZpZ2F0aW5nVG9cIiBldmVudCBhdHRhY2hlZCBpbiBtYWluLXBhZ2UueG1sXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIC8qXG4gICAgVGhpcyBnZXRzIGEgcmVmZXJlbmNlIHRoaXMgcGFnZeKAmXMgPFBhZ2U+IFVJIGNvbXBvbmVudC4gWW91IGNhblxuICAgIHZpZXcgdGhlIEFQSSByZWZlcmVuY2Ugb2YgdGhlIFBhZ2UgdG8gc2VlIHdoYXTigJlzIGF2YWlsYWJsZSBhdFxuICAgIGh0dHBzOi8vZG9jcy5uYXRpdmVzY3JpcHQub3JnL2FwaS1yZWZlcmVuY2UvY2xhc3Nlcy9fdWlfcGFnZV8ucGFnZS5odG1sXG4gICAgKi9cbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgY3Jvc3NoYWlyID0gcGFnZS5nZXRWaWV3QnlJZChcImNyb3NzaGFpclwiKTtcbiAgICBkb3VibGVsaW5lID0gcGFnZS5nZXRWaWV3QnlJZChcImRvdWJsZWxpbmVcIik7XG4gICAgdXBwZXJUZXh0ID0gcGFnZS5nZXRWaWV3QnlJZChcInVwcGVyVGV4dFwiKTtcbiAgICBsb3dlclRleHQgPSBwYWdlLmdldFZpZXdCeUlkKFwibG93ZXJUZXh0XCIpO1xuICAgIC8qXG4gICAgQSBwYWdl4oCZcyBiaW5kaW5nQ29udGV4dCBpcyBhbiBvYmplY3QgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBwZXJmb3JtXG4gICAgZGF0YSBiaW5kaW5nIGJldHdlZW4gWE1MIG1hcmt1cCBhbmQgVHlwZVNjcmlwdCBjb2RlLiBQcm9wZXJ0aWVzXG4gICAgb24gdGhlIGJpbmRpbmdDb250ZXh0IGNhbiBiZSBhY2Nlc3NlZCB1c2luZyB0aGUge3sgfX0gc3ludGF4IGluIFhNTC5cbiAgICBJbiB0aGlzIGV4YW1wbGUsIHRoZSB7eyBtZXNzYWdlIH19IGFuZCB7eyBvblRhcCB9fSBiaW5kaW5ncyBhcmUgcmVzb2x2ZWRcbiAgICBhZ2FpbnN0IHRoZSBvYmplY3QgcmV0dXJuZWQgYnkgY3JlYXRlVmlld01vZGVsKCkuXG5cblxuICAgIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBkYXRhIGJpbmRpbmcgaW4gTmF0aXZlU2NyaXB0IGF0XG4gICAgaHR0cHM6Ly9kb2NzLm5hdGl2ZXNjcmlwdC5vcmcvY29yZS1jb25jZXB0cy9kYXRhLWJpbmRpbmcuXG4gICAgKi9cbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IEhlbGxvV29ybGRNb2RlbCgpO1xufVxuXG4vL1RPRE86IENhbWVyYSBvblJlc3VtZSwgd2hlbiBpdCdzIGxvc3QuIEZZSTogaHR0cHM6Ly9kb2NzLm5hdGl2ZXNjcmlwdC5vcmcvY29yZS1jb25jZXB0cy9hcHBsaWNhdGlvbi1saWZlY3ljbGVcbmFwcC5vbihhcHAucmVzdW1lRXZlbnQsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgLy9vbkNyZWF0aW5nVmlldyhhcmdzKTtcbiAgY2FtZXJhUHJldmlldy5vblJlc3VtZSgpO1xufSk7XG5hcHAub24oYXBwLnN1c3BlbmRFdmVudCwgZnVuY3Rpb24oYXJncykge1xuICBjYW1lcmFQcmV2aWV3Lm9uUGF1c2UoKTtcbiAgcm90VmVjdG9yLnN0b3BSb3RVcGRhdGVzKCk7XG59KTtcbmFwcC5vbihhcHAuZXhpdEV2ZW50LCBmdW5jdGlvbihhcmdzKSB7XG4gIHJvdFZlY3Rvci5zdG9wUm90VXBkYXRlcygpO1xufSk7XG4iXX0=