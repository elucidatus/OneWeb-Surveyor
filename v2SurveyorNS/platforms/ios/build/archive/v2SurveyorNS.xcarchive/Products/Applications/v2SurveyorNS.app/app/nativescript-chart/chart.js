"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var layout = require("ui/layouts/grid-layout");
var page;
var ele = [];
var maxEle;
var minEle;
var targetEle;
var prevIndex;
var smoothingRange; // when there is a data skip in the azimuth, we want to smooth it out linearly. This is the max range of the smoothing. Any jumps more than 20 will not be smoothed
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    maxEle = 60;
    minEle = 0;
    targetEle = 40;
    smoothingRange = 20;
    page.getViewById("graph").height = maxHeight;
    var ltarget = page.getViewById("ltarget");
    ltarget.height = width;
    ltarget.translateY = -maxHeight * ele2Percent(targetEle);
    for (var i = 0; i < 360; i++) {
        ele.push((maxEle + minEle) / 2);
        page.getViewById("l" + i).height = maxHeight * ele2Percent(ele[i]);
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation, isOn) {
    var az = Math.floor(azimuth) + 180;
    layout.GridLayout.setColumn(page.getViewById("lcursor"), az);
    if (isOn) {
        ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
        var currentView = page.getViewById("l" + az);
        currentView.height = maxHeight * ele2Percent(ele[az]);
        var dif = az - prevIndex;
        if (Math.abs(dif) > 1 && Math.abs(dif) < smoothingRange) {
            var start = void 0, end = void 0;
            if (dif > 0) {
                start = prevIndex + 1;
                end = az;
            }
            else {
                start = az + 1;
                end = prevIndex;
            }
            for (var i = start; i < end; i++) {
                ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
                page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
            }
        }
        prevIndex = az;
    }
}
exports.updateGraph = updateGraph;
function clear() {
    for (var i = 0; i < 360; i++) {
        ele[i] = (maxEle + minEle) / 2;
        page.getViewById("l" + i).height = maxHeight * ele2Percent(ele[i]);
    }
}
exports.clear = clear;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUdyQywrQ0FBaUQ7QUFFakQsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7QUFFekIsSUFBSSxNQUFjLENBQUM7QUFDbkIsSUFBSSxNQUFjLENBQUM7QUFDbkIsSUFBSSxTQUFpQixDQUFDO0FBQ3RCLElBQUksU0FBaUIsQ0FBQztBQUN0QixJQUFJLGNBQXNCLENBQUMsQ0FBQyxtS0FBbUs7QUFFL0wsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBQ3RHLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtBQUV6RyxtQkFBMEIsTUFBTTtJQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNmLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQzdDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxD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LENBQUMsRUFBRSxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0FBQ0gsQ0FBQztBQUxELHNCQUtDO0FBRUQscUJBQXFCLFNBQVM7SUFDNUIsTUFBTSxDQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFDLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRDtBQUNBLENBQUM7QUFERCx3QkFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gXCJwbGF0Zm9ybVwiO1xyXG5pbXBvcnQgKiBhcyBrbm93bkNvbG9ycyBmcm9tIFwiY29sb3Iva25vd24tY29sb3JzXCI7XHJcbmltcG9ydCAqIGFzIEltYWdlTW9kdWxlIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XHJcbmltcG9ydCAqIGFzIGxheW91dCBmcm9tIFwidWkvbGF5b3V0cy9ncmlkLWxheW91dFwiO1xyXG5cclxubGV0IHBhZ2U7XHJcbmNvbnN0IGVsZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbmxldCBtYXhFbGU6IG51bWJlcjtcclxubGV0IG1pbkVsZTogbnVtYmVyO1xyXG5sZXQgdGFyZ2V0RWxlOiBudW1iZXI7XHJcbmxldCBwcmV2SW5kZXg6IG51bWJlcjtcclxubGV0IHNtb290aGluZ1JhbmdlOiBudW1iZXI7IC8vIHdoZW4gdGhlcmUgaXMgYSBkYXRhIHNraXAgaW4gdGhlIGF6aW11dGgsIHdlIHdhbnQgdG8gc21vb3RoIGl0IG91dCBsaW5lYXJseS4gVGhpcyBpcyB0aGUgbWF4IHJhbmdlIG9mIHRoZSBzbW9vdGhpbmcuIEFueSBqdW1wcyBtb3JlIHRoYW4gMjAgd2lsbCBub3QgYmUgc21vb3RoZWRcclxuXHJcbmNvbnN0IHdpZHRoID0gcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4ud2lkdGhQaXhlbHMgLyAzNjAgL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlOyAvLyBpbiBkcFxyXG5jb25zdCBtYXhIZWlnaHQgPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5oZWlnaHRQaXhlbHMgLyA4IC9wbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5zY2FsZTsgLy8gaW4gZHBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0R3JhcGgobXlQYWdlKSB7XHJcbiAgY29uc29sZS5sb2coXCJFbnRlcmluZyBpbml0R3JhcGhcIik7XHJcbiAgcGFnZSA9IG15UGFnZTtcclxuICBtYXhFbGUgPSA2MDtcclxuICBtaW5FbGUgPSAwO1xyXG4gIHRhcmdldEVsZSA9IDQwO1xyXG4gIHNtb290aGluZ1JhbmdlID0gMjA7XHJcbiAgcGFnZS5nZXRWaWV3QnlJZChcImdyYXBoXCIpLmhlaWdodCA9IG1heEhlaWdodDtcbiAgY29uc3QgbHRhcmdldCA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJsdGFyZ2V0XCIpO1xyXG4gIGx0YXJnZXQuaGVpZ2h0ID0gd2lkdGg7XHJcbiAgbHRhcmdldC50cmFuc2xhdGVZID0gLW1heEhlaWdodCAqIGVsZTJQZXJjZW50KHRhcmdldEVsZSk7XHJcblxyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCAzNjA7IGkrKykge1xyXG4gICAgZWxlLnB1c2goKG1heEVsZSsgbWluRWxlKS8yKTtcclxuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIraSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVHcmFwaChhemltdXRoLCBlbGV2YXRpb24sIGlzT24pIHtcclxuICBjb25zdCBheiA9IE1hdGguZmxvb3IoYXppbXV0aCkgKyAxODA7XHJcbiAgbGF5b3V0LkdyaWRMYXlvdXQuc2V0Q29sdW1uKHBhZ2UuZ2V0Vmlld0J5SWQoXCJsY3Vyc29yXCIpLCBheik7XHJcbiAgaWYoaXNPbil7XHJcbiAgICBlbGVbYXpdID0gLWVsZXZhdGlvbjxtaW5FbGU/IG1pbkVsZTogLWVsZXZhdGlvbj5tYXhFbGU/IG1heEVsZTogLWVsZXZhdGlvbjtcclxuXHJcbiAgICBjb25zdCBjdXJyZW50VmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrYXopO1xyXG4gICAgY3VycmVudFZpZXcuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2F6XSk7XHJcblxyXG4gICAgY29uc3QgZGlmID0gYXotcHJldkluZGV4O1xyXG4gICAgaWYoTWF0aC5hYnMoZGlmKSA+IDEgJiYgTWF0aC5hYnMoZGlmKSA8IHNtb290aGluZ1JhbmdlKSB7XHJcbiAgICAgIGxldCBzdGFydCwgZW5kO1xyXG4gICAgICBpZihkaWYgPiAwKSB7XHJcbiAgICAgICAgc3RhcnQgPSBwcmV2SW5kZXggKyAxO1xyXG4gICAgICAgIGVuZCA9IGF6O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXJ0ID0gYXogKyAxO1xyXG4gICAgICAgIGVuZCA9IHByZXZJbmRleDtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xyXG4gICAgICAgIGVsZVtpXSA9IGVsZVtzdGFydC0xXSArIChpIC0gc3RhcnQrMSkgLyAoZGlmLTEpICogKGVsZVthel0tZWxlW3ByZXZJbmRleF0pO1xyXG4gICAgICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrKGkpKS5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwcmV2SW5kZXggPSBhejtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhcigpIHtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgMzYwOyBpKyspIHtcclxuICAgIGVsZVtpXSA9IChtYXhFbGUrIG1pbkVsZSkvMjtcclxuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIraSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZTJQZXJjZW50KGVsZXZhdGlvbikge1xyXG4gIHJldHVybiAoZWxldmF0aW9uIC0gbWluRWxlKS8obWF4RWxlLW1pbkVsZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkV4aXQoKSB7XHJcbn1cclxuIl19