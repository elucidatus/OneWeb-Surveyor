"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var isStart = false;
var isEleAbove0 = false;
var isPressed = false;
var largeDeltaAz = false;
var oldAz = 0;
var page;
var pt1, pt2, pt3, pt4;
var translateY = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale;
function trigger1(mPage) {
    if (!isStart) {
        page = mPage;
        pt1 = page.getViewById("pt1");
        pt2 = page.getViewById("pt2");
        pt3 = page.getViewById("pt3");
        pt4 = page.getViewById("pt4");
        pt1.translateY = translateY;
        pt2.translateY = translateY;
        pt3.translateY = translateY;
        pt4.translateY = translateY;
    }
}
exports.trigger1 = trigger1;
function trigger2(ele) {
    if (!isEleAbove0) {
        isEleAbove0 = -ele > 0;
        if (isEleAbove0) {
            fadeaway(pt1, pt2);
        }
    }
}
exports.trigger2 = trigger2;
function trigger3(az) {
    if (!isPressed) {
        fadeaway(pt2, pt3);
    }
    oldAz = az;
    isPressed = true;
}
exports.trigger3 = trigger3;
function trigger4(az) {
    if (!largeDeltaAz && isPressed) {
        largeDeltaAz = Math.abs(oldAz - az) > 20;
        if (largeDeltaAz) {
            end(pt3, pt4);
        }
    }
}
exports.trigger4 = trigger4;
function fadeaway(oldView, newView) {
    return oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 1000
        });
    });
}
function end(oldView, newView) {
    oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 2000
        }).then(function () {
            newView.animate({
                opacity: 0,
                duration: 2000
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdHJ1Y3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBRXJDLElBQUksT0FBTyxHQUFZLEtBQUssQ0FBQztBQUM3QixJQUFJLFdBQVcsR0FBWSxLQUFLLENBQUM7QUFDakMsSUFBSSxTQUFTLEdBQVksS0FBSyxDQUFDO0FBQy9CLElBQUksWUFBWSxHQUFZLEtBQUssQ0FBQztBQUNsQyxJQUFJLEtBQUssR0FBVyxDQUFDLENBQUM7QUFFdEIsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztBQUN2QixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztBQUVqRyxrQkFBeUIsS0FBSztJQUM1QixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUM7QUFaRCw0QkFZQztBQUVELGtCQUF5QixHQUFHO0lBQzFCLEVBQUUsQ0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQixXQUFXLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEVBQUUsQ0FBQSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDZixRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQVBELDRCQU9DO0FBRUQsa0JBQXlCLEVBQUU7SUFDekIsRUFBRSxDQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2QsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNYLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQU5ELDRCQU1DO0FBRUQsa0JBQXlCLEVBQUU7SUFDekIsRUFBRSxDQUFBLENBQUMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLENBQUEsQ0FBQztRQUM3QixZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFQRCw0QkFPQztBQUVELGtCQUFrQixPQUFPLEVBQUUsT0FBTztJQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNyQixPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNOLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDZCxPQUFPLEVBQUUsQ0FBQztZQUNWLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsYUFBYSxPQUFPLEVBQUUsT0FBTztJQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2QsT0FBTyxFQUFFLENBQUM7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDTixPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ2QsT0FBTyxFQUFFLENBQUM7WUFDVixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDTixPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkLE9BQU8sRUFBQyxDQUFDO2dCQUNULFFBQVEsRUFBRSxJQUFJO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcblxubGV0IGlzU3RhcnQ6IGJvb2xlYW4gPSBmYWxzZTtcbmxldCBpc0VsZUFib3ZlMDogYm9vbGVhbiA9IGZhbHNlO1xubGV0IGlzUHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xubGV0IGxhcmdlRGVsdGFBejogYm9vbGVhbiA9IGZhbHNlO1xubGV0IG9sZEF6OiBudW1iZXIgPSAwO1xuXG5sZXQgcGFnZTtcbmxldCBwdDEsIHB0MiwgcHQzLCBwdDQ7XG5jb25zdCB0cmFuc2xhdGVZID0gcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uaGVpZ2h0UGl4ZWxzIC8gOCAvcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyMShtUGFnZSkge1xuICBpZighaXNTdGFydCkge1xuICAgIHBhZ2UgPSBtUGFnZTtcbiAgICBwdDEgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQxXCIpO1xuICAgIHB0MiA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDJcIik7XG4gICAgcHQzID0gcGFnZS5nZXRWaWV3QnlJZChcInB0M1wiKTtcbiAgICBwdDQgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQ0XCIpO1xuICAgIHB0MS50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbiAgICBwdDIudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XG4gICAgcHQzLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xuICAgIHB0NC50cmFuc2xhdGVZID0gdHJhbnNsYXRlWTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlcjIoZWxlKSB7XG4gIGlmKCFpc0VsZUFib3ZlMCkge1xuICAgIGlzRWxlQWJvdmUwID0gLWVsZSA+IDA7XG4gICAgaWYoaXNFbGVBYm92ZTApIHtcbiAgICAgIGZhZGVhd2F5KHB0MSwgcHQyKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIzKGF6KSB7XG4gIGlmKCFpc1ByZXNzZWQpIHtcbiAgICBmYWRlYXdheShwdDIsIHB0Myk7XG4gIH1cbiAgb2xkQXogPSBhejtcbiAgaXNQcmVzc2VkID0gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXI0KGF6KSB7XG4gIGlmKCFsYXJnZURlbHRhQXogJiYgaXNQcmVzc2VkKXtcbiAgICBsYXJnZURlbHRhQXogPSBNYXRoLmFicyhvbGRBei1heikgPiAyMDtcbiAgICBpZihsYXJnZURlbHRhQXopIHtcbiAgICAgIGVuZChwdDMsIHB0NCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZhZGVhd2F5KG9sZFZpZXcsIG5ld1ZpZXcpIHtcbiAgcmV0dXJuIG9sZFZpZXcuYW5pbWF0ZSh7XG4gICAgb3BhY2l0eTogMCxcbiAgICBkdXJhdGlvbjogMTAwMFxuICB9KS50aGVuKCgpPT57XG4gICAgbmV3Vmlldy5hbmltYXRlKHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkdXJhdGlvbjogMTAwMFxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZW5kKG9sZFZpZXcsIG5ld1ZpZXcpIHtcbiAgb2xkVmlldy5hbmltYXRlKHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIGR1cmF0aW9uOiAxMDAwXG4gIH0pLnRoZW4oKCkgPT57XG4gICAgbmV3Vmlldy5hbmltYXRlKHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkdXJhdGlvbjogMjAwMFxuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgbmV3Vmlldy5hbmltYXRlKHtcbiAgICAgICAgb3BhY2l0eTowLFxuICAgICAgICBkdXJhdGlvbjogMjAwMFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19