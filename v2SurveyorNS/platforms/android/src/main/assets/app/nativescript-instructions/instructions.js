"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var isStart = false;
var isEleAbove0 = false;
var isPressed = false;
var largeDeltaAz = false;
var oldAz = 0;
var page;
var pt1, pt2, pt3, pt4, pt5;
var currentView;
var translateY = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale;
function trigger1(mPage) {
    if (!isStart) {
        page = mPage;
        pt1 = page.getViewById("pt1");
        pt2 = page.getViewById("pt2");
        pt3 = page.getViewById("pt3");
        pt4 = page.getViewById("pt4");
        pt5 = page.getViewById("pt5");
        pt1.translateY = translateY;
        pt2.translateY = translateY;
        pt3.translateY = translateY;
        pt4.translateY = translateY;
        pt5.translateY = translateY;
        currentView = pt1;
    }
}
exports.trigger1 = trigger1;
function trigger2(ele) {
    if (!isEleAbove0) {
        isEleAbove0 = -ele > 0;
        if (isEleAbove0) {
            fadeaway(pt2);
        }
    }
    else if (-ele > 40) {
        pt5.opacity = 1;
    }
    else {
        pt5.opacity = 0;
    }
}
exports.trigger2 = trigger2;
function trigger3(az) {
    if (!isPressed) {
        fadeaway(pt3);
        isEleAbove0 = true;
    }
    oldAz = az;
    isPressed = true;
}
exports.trigger3 = trigger3;
function trigger4(az) {
    if (!largeDeltaAz && isPressed) {
        largeDeltaAz = Math.abs(oldAz - az) > 20;
        if (largeDeltaAz) {
            end(pt3, pt4);
        }
    }
}
exports.trigger4 = trigger4;
function fadeaway(newView) {
    return currentView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 1000
        });
        currentView = newView;
    });
}
function end(oldView, newView) {
    oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 2000
        }).then(function () {
            newView.animate({
                opacity: 0,
                duration: 2000
            });
            currentView = newView;
        });
    });
}
function hide(view) {
    view.animate({
        opacity: 0,
        duration: 1000
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdHJ1Y3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBRXJDLElBQUksT0FBTyxHQUFZLEtBQUssQ0FBQztBQUM3QixJQUFJLFdBQVcsR0FBWSxLQUFLLENBQUM7QUFDakMsSUFBSSxTQUFTLEdBQVksS0FBSyxDQUFDO0FBQy9CLElBQUksWUFBWSxHQUFZLEtBQUssQ0FBQztBQUNsQyxJQUFJLEtBQUssR0FBVyxDQUFDLENBQUM7QUFFdEIsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDNUIsSUFBSSxXQUFXLENBQUM7QUFDaEIsSUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFFakcsa0JBQXlCLEtBQUs7SUFDNUIsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1osSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxD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ZnJvbSBcInBsYXRmb3JtXCI7XHJcblxyXG5sZXQgaXNTdGFydDogYm9vbGVhbiA9IGZhbHNlO1xyXG5sZXQgaXNFbGVBYm92ZTA6IGJvb2xlYW4gPSBmYWxzZTtcclxubGV0IGlzUHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5sZXQgbGFyZ2VEZWx0YUF6OiBib29sZWFuID0gZmFsc2U7XHJcbmxldCBvbGRBejogbnVtYmVyID0gMDtcclxuXHJcbmxldCBwYWdlO1xyXG5sZXQgcHQxLCBwdDIsIHB0MywgcHQ0LCBwdDU7XHJcbmxldCBjdXJyZW50VmlldztcclxuY29uc3QgdHJhbnNsYXRlWSA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyAvIDggL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIxKG1QYWdlKSB7XHJcbiAgaWYoIWlzU3RhcnQpIHtcclxuICAgIHBhZ2UgPSBtUGFnZTtcclxuICAgIHB0MSA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDFcIik7XHJcbiAgICBwdDIgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQyXCIpO1xyXG4gICAgcHQzID0gcGFnZS5nZXRWaWV3QnlJZChcInB0M1wiKTtcclxuICAgIHB0NCA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDRcIik7XHJcbiAgICBwdDUgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQ1XCIpO1xyXG4gICAgcHQxLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQyLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQzLnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQ0LnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgcHQ1LnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVZO1xyXG4gICAgY3VycmVudFZpZXcgPSBwdDE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlcjIoZWxlKSB7XHJcbiAgaWYoIWlzRWxlQWJvdmUwKSB7XHJcbiAgICBpc0VsZUFib3ZlMCA9IC1lbGUgPiAwO1xyXG4gICAgaWYoaXNFbGVBYm92ZTApIHtcclxuICAgICAgZmFkZWF3YXkocHQyKTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYoLWVsZSA+IDQwKSB7XHJcbiAgICBwdDUub3BhY2l0eSA9IDE7XHJcbiAgfSBlbHNlIHtcclxuICAgIHB0NS5vcGFjaXR5ID0gMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyMyhheikge1xyXG4gIGlmKCFpc1ByZXNzZWQpIHtcclxuICAgIGZhZGVhd2F5KHB0Myk7XHJcbiAgICBpc0VsZUFib3ZlMCA9IHRydWU7XHJcbiAgfVxyXG4gIG9sZEF6ID0gYXo7XHJcbiAgaXNQcmVzc2VkID0gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXI0KGF6KSB7XHJcbiAgaWYoIWxhcmdlRGVsdGFBeiAmJiBpc1ByZXNzZWQpe1xyXG4gICAgbGFyZ2VEZWx0YUF6ID0gTWF0aC5hYnMob2xkQXotYXopID4gMjA7XHJcbiAgICBpZihsYXJnZURlbHRhQXopIHtcclxuICAgICAgZW5kKHB0MywgcHQ0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhZGVhd2F5KG5ld1ZpZXcpIHtcclxuICByZXR1cm4gY3VycmVudFZpZXcuYW5pbWF0ZSh7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgZHVyYXRpb246IDEwMDBcclxuICB9KS50aGVuKCgpPT57XHJcbiAgICBuZXdWaWV3LmFuaW1hdGUoe1xyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBkdXJhdGlvbjogMTAwMFxyXG4gICAgfSk7XHJcbiAgICBjdXJyZW50VmlldyA9IG5ld1ZpZXc7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuZChvbGRWaWV3LCBuZXdWaWV3KSB7XHJcbiAgb2xkVmlldy5hbmltYXRlKHtcclxuICAgIG9wYWNpdHk6IDAsXHJcbiAgICBkdXJhdGlvbjogMTAwMFxyXG4gIH0pLnRoZW4oKCkgPT57XHJcbiAgICBuZXdWaWV3LmFuaW1hdGUoe1xyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBkdXJhdGlvbjogMjAwMFxyXG4gICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgIG5ld1ZpZXcuYW5pbWF0ZSh7XHJcbiAgICAgICAgb3BhY2l0eTowLFxyXG4gICAgICAgIGR1cmF0aW9uOiAyMDAwXHJcbiAgICAgIH0pO1xyXG4gICAgICBjdXJyZW50VmlldyA9IG5ld1ZpZXc7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5mdW5jdGlvbiBoaWRlKHZpZXcpIHtcclxuICB2aWV3LmFuaW1hdGUoe1xyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIGR1cmF0aW9uOiAxMDAwXHJcbiAgfSk7XHJcbn1cclxuIl19