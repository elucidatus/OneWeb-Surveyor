"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var page;
var ele = [];
var maxEle;
var minEle;
var timer;
var prevIndex;
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    console.log("l0 is " + page.getViewById("l0"));
    maxEle = 60;
    minEle = 0;
    timer = 10;
    page.getViewById("graph").height = maxHeight;
    for (var i = 0; i < 360; i++) {
        console.log("dealing with: " + i);
        ele.push((maxEle + minEle) / 2);
        var heightPercent = (ele[i] - minEle) / (maxEle - minEle);
        page.getViewById("l" + i).height = maxHeight;
        // page.addCss("#l" + i + " {height: " + heightPercent*maxHeight + "}");
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation) {
    var az = Math.floor(azimuth) + 180;
    ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
    var currentView = page.getViewById("l" + az);
    currentView.height = maxHeight * ele2Percent(ele[az]);
    var dif = az - prevIndex;
    if (Math.abs(dif) > 1 && Math.abs(dif) < 90) {
        console.log("dif is " + dif);
        var start = void 0, end = void 0;
        if (dif > 0) {
            start = prevIndex + 1;
            end = az;
        }
        else {
            start = az + 1;
            end = prevIndex;
        }
        console.log("startxend is " + start + " x " + end + " with eles" + ele[start - 1] + " x " + ele[end]);
        for (var i = start; i < end; i++) {
            ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
            console.log("average nums are: " + ele[i]);
            page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
        }
    }
    prevIndex = az;
}
exports.updateGraph = updateGraph;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
    // bmp.dispose();
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUlyQyxJQUFJLElBQUksQ0FBQztBQUNULElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztBQUV6QixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLEtBQWEsQ0FBQztBQUNsQixJQUFJLFNBQWlCLENBQUM7QUFFdEIsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBQ3RHLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtBQUV6RyxtQkFBMEIsTUFBTTtJQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ1osTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDN0MsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFn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QUExQkQsa0NBMEJDO0FBRUQscUJBQXFCLFNBQVM7SUFDNUIsTUFBTSxDQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFDLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRDtJQUNFLGlCQUFpQjtBQUNuQixDQUFDO0FBRkQsd0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcclxuaW1wb3J0ICogYXMga25vd25Db2xvcnMgZnJvbSBcImNvbG9yL2tub3duLWNvbG9yc1wiO1xyXG5pbXBvcnQgKiBhcyBJbWFnZU1vZHVsZSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZVwiO1xyXG5cclxubGV0IHBhZ2U7XHJcbmNvbnN0IGVsZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbmxldCBtYXhFbGU6IG51bWJlcjtcclxubGV0IG1pbkVsZTogbnVtYmVyO1xyXG5sZXQgdGltZXI6IG51bWJlcjtcclxubGV0IHByZXZJbmRleDogbnVtYmVyO1xyXG5cclxuY29uc3Qgd2lkdGggPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi53aWR0aFBpeGVscyAvIDM2MCAvcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7IC8vIGluIGRwXHJcbmNvbnN0IG1heEhlaWdodCA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyAvIDggL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlOyAvLyBpbiBkcFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRHcmFwaChteVBhZ2UpIHtcclxuICBjb25zb2xlLmxvZyhcIkVudGVyaW5nIGluaXRHcmFwaFwiKTtcclxuICBwYWdlID0gbXlQYWdlO1xyXG4gIGNvbnNvbGUubG9nKFwibDAgaXMgXCIgKyBwYWdlLmdldFZpZXdCeUlkKFwibDBcIikpO1xyXG4gIG1heEVsZSA9IDYwO1xyXG4gIG1pbkVsZSA9IDA7XHJcbiAgdGltZXIgPSAxMDtcclxuICBwYWdlLmdldFZpZXdCeUlkKFwiZ3JhcGhcIikuaGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCAzNjA7IGkrKykge1xyXG4gICAgY29uc29sZS5sb2coXCJkZWFsaW5nIHdpdGg6IFwiKyBpKTtcclxuICAgIGVsZS5wdXNoKChtYXhFbGUrIG1pbkVsZSkvMik7XHJcbiAgICBjb25zdCBoZWlnaHRQZXJjZW50ID0gKGVsZVtpXSAtIG1pbkVsZSkvKG1heEVsZSAtIG1pbkVsZSk7XHJcbiAgICBwYWdlLmdldFZpZXdCeUlkKFwibFwiK2kpLmhlaWdodCA9IG1heEhlaWdodDtcclxuICAgIC8vIHBhZ2UuYWRkQ3NzKFwiI2xcIiArIGkgKyBcIiB7aGVpZ2h0OiBcIiArIGhlaWdodFBlcmNlbnQqbWF4SGVpZ2h0ICsgXCJ9XCIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUdyYXBoKGF6aW11dGgsIGVsZXZhdGlvbikge1xyXG4gIGNvbnN0IGF6ID0gTWF0aC5mbG9vcihhemltdXRoKSArIDE4MDtcclxuICBlbGVbYXpdID0gLWVsZXZhdGlvbjxtaW5FbGU/IG1pbkVsZTogLWVsZXZhdGlvbj5tYXhFbGU/IG1heEVsZTogLWVsZXZhdGlvbjtcclxuXHJcbiAgY29uc3QgY3VycmVudFZpZXcgPSBwYWdlLmdldFZpZXdCeUlkKFwibFwiK2F6KTtcclxuICBjdXJyZW50Vmlldy5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbYXpdKTtcclxuXHJcbiAgY29uc3QgZGlmID0gYXotcHJldkluZGV4O1xyXG4gIGlmKE1hdGguYWJzKGRpZikgPiAxICYmIE1hdGguYWJzKGRpZikgPCA5MCkge1xyXG4gICAgY29uc29sZS5sb2coXCJkaWYgaXMgXCIgKyBkaWYpO1xyXG4gICAgbGV0IHN0YXJ0LCBlbmQ7XHJcbiAgICBpZihkaWYgPiAwKSB7XHJcbiAgICAgIHN0YXJ0ID0gcHJldkluZGV4ICsgMTtcclxuICAgICAgZW5kID0gYXo7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGFydCA9IGF6ICsgMTtcclxuICAgICAgZW5kID0gcHJldkluZGV4O1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXCJzdGFydHhlbmQgaXMgXCIgKyBzdGFydCsgXCIgeCBcIisgZW5kICsgXCIgd2l0aCBlbGVzXCIgKyBlbGVbc3RhcnQtMV0gK1wiIHggXCIgKyBlbGVbZW5kXSk7XHJcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xyXG4gICAgICBlbGVbaV0gPSBlbGVbc3RhcnQtMV0gKyAoaSAtIHN0YXJ0KzEpIC8gKGRpZi0xKSAqIChlbGVbYXpdLWVsZVtwcmV2SW5kZXhdKTtcclxuICAgICAgY29uc29sZS5sb2coXCJhdmVyYWdlIG51bXMgYXJlOiBcIiArIGVsZVtpXSk7XHJcbiAgICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIrKGkpKS5oZWlnaHQgPSBtYXhIZWlnaHQgKiBlbGUyUGVyY2VudChlbGVbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcmV2SW5kZXggPSBhejtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlMlBlcmNlbnQoZWxldmF0aW9uKSB7XHJcbiAgcmV0dXJuIChlbGV2YXRpb24gLSBtaW5FbGUpLyhtYXhFbGUtbWluRWxlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRXhpdCgpIHtcclxuICAvLyBibXAuZGlzcG9zZSgpO1xyXG59XHJcbiJdfQ==