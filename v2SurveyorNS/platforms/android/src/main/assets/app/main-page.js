"use strict";
/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your pageâ€™s data binding.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var cameraPreview = require("./nativescript-camera-preview/nativescript-camera-preview");
var rotVector = require("./nativescript-rotation-vector/index");
var app = require("application");
var platform = require("platform");
var orientation = require("nativescript-screen-orientation");
var params = require("./nativescript-fov/nativescript-fov");
var permissions = require("nativescript-permissions");
var charts = require("./nativescript-chart/chart");
var colorModule = require("tns-core-modules/color");
var crosshair;
var doubleline;
var upperText;
var lowerText;
var capturebtn;
var x, y, z;
var measuredWidth;
var page;
var isOn = false;
// let filters;
var OUTER_CIRCLE_DIAMETER = 2;
var ANGLE_BETWEEN_LINES = 10;
var updateCallback = function () {
    // console.log("Entered updateCallback");
    if (isOn) {
        charts.updateGraph(x, y);
    }
    var yTranslate = app.ios ? -20 : 0;
    var scaleCrosshair = params.degrees2Scale(OUTER_CIRCLE_DIAMETER, crosshair.getMeasuredHeight());
    crosshair.animate({
        scale: {
            x: scaleCrosshair,
            y: scaleCrosshair
        },
        translate: {
            x: 0,
            y: yTranslate
        },
        rotate: -z,
        duration: 0
    });
    var scaleDoubleLine = params.degrees2Scale(ANGLE_BETWEEN_LINES, doubleline.getMeasuredHeight());
    var distanceFromCenter = params.pixels2Dp((params.degrees2Pixels((-y % ANGLE_BETWEEN_LINES)
        - ANGLE_BETWEEN_LINES / 2 * (y > 0 ? -1 : 1))));
    lowerText.text = 10 * Math.floor(-y / 10);
    upperText.text = 10 * Math.floor((-y + 10) / 10);
    doubleline.animate({
        scale: {
            x: scaleDoubleLine,
            y: scaleDoubleLine
        },
        translate: {
            x: Math.sin(z * Math.PI / 180) * distanceFromCenter,
            y: Math.cos(z * Math.PI / 180) * distanceFromCenter + yTranslate
        },
        rotate: -z,
        duration: 0
    });
    lowerText.animate({
        translate: {
            x: Math.sin(z * Math.PI / 180) * (distanceFromCenter + scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)),
            y: Math.cos(z * Math.PI / 180) * (distanceFromCenter + scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)) + yTranslate
        },
        rotate: -z,
        duration: 0
    });
    upperText.animate({
        translate: {
            x: Math.sin(z * Math.PI / 180) * (distanceFromCenter - scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)),
            y: Math.cos(z * Math.PI / 180) * (distanceFromCenter - scaleDoubleLine * params.degrees2Pixels(ANGLE_BETWEEN_LINES / 2)) + yTranslate
        },
        rotate: -z,
        duration: 0
    });
    if (app.ios) {
        var cameraView = page.getViewById("placeholder-view");
        cameraView.animate({
            scale: {
                x: platform.screen.mainScreen.heightPixels / cameraView.getMeasuredHeight(),
                y: platform.screen.mainScreen.heightPixels / cameraView.getMeasuredHeight()
            },
            translate: {
                x: 0,
                y: app.ios ? -10 : 0
            },
            duration: 2000
        });
    }
};
var rotationCallback = function (data) {
    //console.log("x: " + data.x + " y: " + data.y + " z: " + data.z);
    x = data.x;
    y = data.y;
    z = data.z;
    if (app.ios)
        updateCallback(); // ios doesn't seem to expose a callback for every frame update in the camera preview; therefore, we'll hop on the rotation callback
};
// export function showSideDrawer(args: EventData) {
//     console.log("Show SideDrawer tapped.");
// }
//TODO: split up the code
function onLoaded(args) {
    orientation.setCurrentOrientation("portrait", function () { });
    if (app.android && platform.device.sdkVersion >= '21') {
        var View = android.view.View;
        var window_1 = app.android.startActivity.getWindow();
        // set the status bar to Color.Transparent
        // window.setStatusBarColor(0x000000);
        var decorView = window_1.getDecorView();
        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
            | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
    }
    cameraPreview.onLoaded(args, "placeholder-view");
}
exports.onLoaded = onLoaded;
function onCreatingView(args) {
    charts.initGraph(page);
    if (app.android) {
        permissions.requestPermission(android["Manifest"].permission.CAMERA, "I need these permissions for the viewfinder")
            .then(function () {
            console.log("Woo Hoo, I have the power!");
        })
            .catch(function () {
            console.log("Uh oh, no permissions - plan B time!");
        });
    }
    if (app.android)
        params.initialize();
    cameraPreview.onCreatingView(updateCallback, args);
    if (app.ios !== undefined)
        params.initialize();
    rotVector.startRotUpdates(rotationCallback, { sensorDelay: "game" });
    // filters = new ImageFilters();
    // filters.colorFilter(doubleline, 0, 0, 0).then((result) => {
    //   doubleline.imageSource = result;
    // });
    var maxSize = cameraPreview.getMaxSize();
    params.setVars(maxSize[0], maxSize[1]);
    measuredWidth = params.degrees2Pixels(OUTER_CIRCLE_DIAMETER);
    // console.log(params.getVerticalFOV() + " " + params.getHorizontalFOV());
}
exports.onCreatingView = onCreatingView;
function onTakeShot(args) {
    cameraPreview.onTakeShot(args);
    isOn = !isOn;
    capturebtn.text = isOn ? "Stop" : "Record";
    if (isOn) {
        capturebtn.text = "Stop";
        capturebtn.animate({
            backgroundColor: new colorModule.Color("red"),
            duration: 500
        });
    }
    else {
        capturebtn.text = "Record";
        capturebtn.animate({
            backgroundColor: "#1b5675",
            duration: 500
        });
    }
    console.log("el: " + y);
}
exports.onTakeShot = onTakeShot;
function navigatingTo(args) {
    page = args.object;
    crosshair = page.getViewById("crosshair");
    doubleline = page.getViewById("doubleline");
    upperText = page.getViewById("upperText");
    lowerText = page.getViewById("lowerText");
    capturebtn = page.getViewById("capturebtn");
}
exports.navigatingTo = navigatingTo;
app.on(app.resumeEvent, function (args) {
    rotVector.startRotUpdates(rotationCallback, { sensorDelay: "game" });
    cameraPreview.onResume();
});
app.on(app.suspendEvent, function (args) {
    cameraPreview.onPause();
    rotVector.stopRotUpdates();
    charts.onExit();
});
app.on(app.exitEvent, function (args) {
    console.log("On Exitting");
    rotVector.stopRotUpdates();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztFQUlFOztBQUlGLHlGQUEyRjtBQUMzRixnRUFBa0U7QUFDbEUsaUNBQW1DO0FBR25DLG1DQUFxQztBQUNyQyw2REFBK0Q7QUFDL0QsNERBQThEO0FBQzlELHNEQUF3RDtBQUN4RCxtREFBcUQ7QUFDckQsb0RBQXNEO0FBRXRELElBQUksU0FBYyxDQUFDO0FBQ25CLElBQUksVUFBZSxDQUFDO0FBQ3BCLElBQUksU0FBYyxDQUFDO0FBQ25CLElBQUksU0FBYyxDQUFDO0FBQ25CLElBQUksVUFBZSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDWixJQUFJLGFBQWEsQ0FBQztBQUNsQixJQUFJLElBQUksQ0FBQztBQUNULElBQUksSUFBSSxHQUFZLEtBQUssQ0FBQztBQUMxQixlQUFlO0FBRWYsSUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7QUFDaEMsSUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFFL0IsSUFBTSxjQUFjLEdBQUc7SUFDckIseUNBQXlDO0lBRXpDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7UUFDUCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEMsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xHLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDaEIsS0FBSyxFQUFFO1lBQ0wsQ0FBQyxFQUFFLGNBQWM7WUFDakIsQ0FBQyxFQUFFLGNBQWM7U0FDbEI7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Q0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0IsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzdCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuSW4gTmF0aXZlU2NyaXB0LCBhIGZpbGUgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIGFuIFhNTCBmaWxlIGlzIGtub3duIGFzXHJcbmEgY29kZS1iZWhpbmQgZmlsZS4gVGhlIGNvZGUtYmVoaW5kIGlzIGEgZ3JlYXQgcGxhY2UgdG8gcGxhY2UgeW91ciB2aWV3XHJcbmxvZ2ljLCBhbmQgdG8gc2V0IHVwIHlvdXIgcGFnZeKAmXMgZGF0YSBiaW5kaW5nLlxyXG4qL1xyXG5cclxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xyXG5pbXBvcnQgKiBhcyBjYW1lcmFQcmV2aWV3IGZyb20gJy4vbmF0aXZlc2NyaXB0LWNhbWVyYS1wcmV2aWV3L25hdGl2ZXNjcmlwdC1jYW1lcmEtcHJldmlldyc7XHJcbmltcG9ydCAqIGFzIHJvdFZlY3RvciBmcm9tIFwiLi9uYXRpdmVzY3JpcHQtcm90YXRpb24tdmVjdG9yL2luZGV4XCI7XHJcbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwiYXBwbGljYXRpb25cIjtcclxuaW1wb3J0ICogYXMgZnJhbWVNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWVcIjtcclxuaW1wb3J0ICogYXMgYW5pbWF0aW9uIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2FuaW1hdGlvblwiO1xyXG5pbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcclxuaW1wb3J0ICogYXMgb3JpZW50YXRpb24gZnJvbSBcIm5hdGl2ZXNjcmlwdC1zY3JlZW4tb3JpZW50YXRpb25cIjtcclxuaW1wb3J0ICogYXMgcGFyYW1zIGZyb20gXCIuL25hdGl2ZXNjcmlwdC1mb3YvbmF0aXZlc2NyaXB0LWZvdlwiO1xyXG5pbXBvcnQgKiBhcyBwZXJtaXNzaW9ucyBmcm9tIFwibmF0aXZlc2NyaXB0LXBlcm1pc3Npb25zXCI7XHJcbmltcG9ydCAqIGFzIGNoYXJ0cyBmcm9tIFwiLi9uYXRpdmVzY3JpcHQtY2hhcnQvY2hhcnRcIjtcclxuaW1wb3J0ICogYXMgY29sb3JNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvY29sb3JcIjtcclxuXHJcbmxldCBjcm9zc2hhaXI6IGFueTtcclxubGV0IGRvdWJsZWxpbmU6IGFueTtcclxubGV0IHVwcGVyVGV4dDogYW55O1xyXG5sZXQgbG93ZXJUZXh0OiBhbnk7XHJcbmxldCBjYXB0dXJlYnRuOiBhbnk7XHJcbmxldCB4LCB5LCB6O1xyXG5sZXQgbWVhc3VyZWRXaWR0aDtcclxubGV0IHBhZ2U7XHJcbmxldCBpc09uOiBib29sZWFuID0gZmFsc2U7XHJcbi8vIGxldCBmaWx0ZXJzO1xyXG5cclxuY29uc3QgT1VURVJfQ0lSQ0xFX0RJQU1FVEVSID0gMjtcclxuY29uc3QgQU5HTEVfQkVUV0VFTl9MSU5FUyA9IDEwO1xyXG5cclxuY29uc3QgdXBkYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb25zb2xlLmxvZyhcIkVudGVyZWQgdXBkYXRlQ2FsbGJhY2tcIik7XHJcblxyXG4gIGlmKGlzT24pe1xyXG4gICAgY2hhcnRzLnVwZGF0ZUdyYXBoKHgseSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB5VHJhbnNsYXRlID0gYXBwLmlvcz8gLTIwIDogMDtcclxuICBjb25zdCBzY2FsZUNyb3NzaGFpciA9IHBhcmFtcy5kZWdyZWVzMlNjYWxlKE9VVEVSX0NJUkNMRV9ESUFNRVRFUiwgY3Jvc3NoYWlyLmdldE1lYXN1cmVkSGVpZ2h0KCkpO1xyXG4gIGNyb3NzaGFpci5hbmltYXRlKHtcclxuICAgIHNjYWxlOiB7XHJcbiAgICAgIHg6IHNjYWxlQ3Jvc3NoYWlyLFxyXG4gICAgICB5OiBzY2FsZUNyb3NzaGFpclxyXG4gICAgfSxcclxuICAgIHRyYW5zbGF0ZToge1xyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiB5VHJhbnNsYXRlXHJcbiAgICB9LFxyXG4gICAgcm90YXRlOiAteixcclxuICAgIGR1cmF0aW9uOiAwXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHNjYWxlRG91YmxlTGluZSA9IHBhcmFtcy5kZWdyZWVzMlNjYWxlKEFOR0xFX0JFVFdFRU5fTElORVMsIGRvdWJsZWxpbmUuZ2V0TWVhc3VyZWRIZWlnaHQoKSk7XHJcbiAgY29uc3QgZGlzdGFuY2VGcm9tQ2VudGVyID0gcGFyYW1zLnBpeGVsczJEcCgocGFyYW1zLmRlZ3JlZXMyUGl4ZWxzKCgteSAlIEFOR0xFX0JFVFdFRU5fTElORVMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIEFOR0xFX0JFVFdFRU5fTElORVMvMiAqICh5PjA/IC0xOiAxKSkpKTtcclxuICBsb3dlclRleHQudGV4dCA9IDEwKiBNYXRoLmZsb29yKC15LzEwKTtcclxuICB1cHBlclRleHQudGV4dCA9IDEwKiBNYXRoLmZsb29yKCgteSsxMCkvMTApO1xyXG4gIGRvdWJsZWxpbmUuYW5pbWF0ZSh7XHJcbiAgICBzY2FsZToge1xyXG4gICAgICB4OiBzY2FsZURvdWJsZUxpbmUsXHJcbiAgICAgIHk6IHNjYWxlRG91YmxlTGluZVxyXG4gICAgfSxcclxuICAgIHRyYW5zbGF0ZToge1xyXG4gICAgICB4IDogTWF0aC5zaW4oeipNYXRoLlBJLzE4MCkqZGlzdGFuY2VGcm9tQ2VudGVyLFxyXG4gICAgICB5OiBNYXRoLmNvcyh6Kk1hdGguUEkvMTgwKSpkaXN0YW5jZUZyb21DZW50ZXIgKyB5VHJhbnNsYXRlXHJcbiAgICB9LFxyXG5cclxuICAgIHJvdGF0ZTogLXosXHJcbiAgICBkdXJhdGlvbjogMFxyXG4gIH0pO1xyXG4gIGxvd2VyVGV4dC5hbmltYXRlKHtcclxuICAgIHRyYW5zbGF0ZToge1xyXG4gICAgICB4IDogTWF0aC5zaW4oeipNYXRoLlBJLzE4MCkqIChkaXN0YW5jZUZyb21DZW50ZXIrc2NhbGVEb3VibGVMaW5lKnBhcmFtcy5kZWdyZWVzMlBpeGVscyhBTkdMRV9CRVRXRUVOX0xJTkVTLzIpKSxcclxuICAgICAgeSA6IE1hdGguY29zKHoqTWF0aC5QSS8xODApKiAoZGlzdGFuY2VGcm9tQ2VudGVyK3NjYWxlRG91YmxlTGluZSpwYXJhbXMuZGVncmVlczJQaXhlbHMoQU5HTEVfQkVUV0VFTl9MSU5FUy8yKSkgKyB5VHJhbnNsYXRlXHJcbiAgICB9LFxyXG4gICAgcm90YXRlOiAteixcclxuICAgIGR1cmF0aW9uOiAwXHJcbiAgfSk7XHJcbiAgdXBwZXJUZXh0LmFuaW1hdGUoe1xyXG4gICAgdHJhbnNsYXRlOiB7XHJcbiAgICAgIHggOiAgTWF0aC5zaW4oeipNYXRoLlBJLzE4MCkqIChkaXN0YW5jZUZyb21DZW50ZXItc2NhbGVEb3VibGVMaW5lKnBhcmFtcy5kZWdyZWVzMlBpeGVscyhBTkdMRV9CRVRXRUVOX0xJTkVTLzIpKSxcclxuICAgICAgeSA6ICBNYXRoLmNvcyh6Kk1hdGguUEkvMTgwKSogKGRpc3RhbmNlRnJvbUNlbnRlci1zY2FsZURvdWJsZUxpbmUqcGFyYW1zLmRlZ3JlZXMyUGl4ZWxzKEFOR0xFX0JFVFdFRU5fTElORVMvMikpICsgeVRyYW5zbGF0ZVxyXG4gICAgfSxcclxuICAgIHJvdGF0ZTogLXosXHJcbiAgICBkdXJhdGlvbjogMFxyXG4gIH0pO1xyXG4gIGlmIChhcHAuaW9zKSB7XHJcbiAgICBsZXQgY2FtZXJhVmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwbGFjZWhvbGRlci12aWV3XCIpO1xyXG4gICAgY2FtZXJhVmlldy5hbmltYXRlKHtcclxuICAgICAgc2NhbGU6IHtcclxuICAgICAgICB4OiBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi5oZWlnaHRQaXhlbHMvY2FtZXJhVmlldy5nZXRNZWFzdXJlZEhlaWdodCgpLFxyXG4gICAgICAgIHk6IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscy9jYW1lcmFWaWV3LmdldE1lYXN1cmVkSGVpZ2h0KClcclxuICAgICAgfSxcclxuICAgICAgdHJhbnNsYXRlOiB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiBhcHAuaW9zPyAtMTAgOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGR1cmF0aW9uOiAyMDAwXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuY29uc3Qgcm90YXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIC8vY29uc29sZS5sb2coXCJ4OiBcIiArIGRhdGEueCArIFwiIHk6IFwiICsgZGF0YS55ICsgXCIgejogXCIgKyBkYXRhLnopO1xyXG4gICAgeCA9IGRhdGEueDtcclxuICAgIHkgPSBkYXRhLnk7XHJcbiAgICB6ID0gZGF0YS56O1xyXG4gICAgaWYoYXBwLmlvcykgdXBkYXRlQ2FsbGJhY2soKTsgLy8gaW9zIGRvZXNuJ3Qgc2VlbSB0byBleHBvc2UgYSBjYWxsYmFjayBmb3IgZXZlcnkgZnJhbWUgdXBkYXRlIGluIHRoZSBjYW1lcmEgcHJldmlldzsgdGhlcmVmb3JlLCB3ZSdsbCBob3Agb24gdGhlIHJvdGF0aW9uIGNhbGxiYWNrXHJcbn07XHJcblxyXG4vLyBleHBvcnQgZnVuY3Rpb24gc2hvd1NpZGVEcmF3ZXIoYXJnczogRXZlbnREYXRhKSB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhcIlNob3cgU2lkZURyYXdlciB0YXBwZWQuXCIpO1xyXG4vLyB9XHJcblxyXG4vL1RPRE86IHNwbGl0IHVwIHRoZSBjb2RlXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcclxuICBvcmllbnRhdGlvbi5zZXRDdXJyZW50T3JpZW50YXRpb24oXCJwb3J0cmFpdFwiLCAoKSA9PiB7fSk7XHJcbiAgaWYgKGFwcC5hbmRyb2lkICYmIHBsYXRmb3JtLmRldmljZS5zZGtWZXJzaW9uID49ICcyMScpIHtcclxuICAgICAgY29uc3QgVmlldyA6YW55ID0gYW5kcm9pZC52aWV3LlZpZXc7XHJcbiAgICAgIGNvbnN0IHdpbmRvdyA9IGFwcC5hbmRyb2lkLnN0YXJ0QWN0aXZpdHkuZ2V0V2luZG93KCk7XHJcbiAgICAgIC8vIHNldCB0aGUgc3RhdHVzIGJhciB0byBDb2xvci5UcmFuc3BhcmVudFxyXG4gICAgICAvLyB3aW5kb3cuc2V0U3RhdHVzQmFyQ29sb3IoMHgwMDAwMDApO1xyXG4gICAgICBjb25zdCBkZWNvclZpZXcgPSB3aW5kb3cuZ2V0RGVjb3JWaWV3KCk7XHJcbiAgICAgIGRlY29yVmlldy5zZXRTeXN0ZW1VaVZpc2liaWxpdHkoXHJcbiAgICAgICAgICBWaWV3LlNZU1RFTV9VSV9GTEFHX0xBWU9VVF9TVEFCTEVcclxuICAgICAgICAgIHwgVmlldy5TWVNURU1fVUlfRkxBR19MQVlPVVRfSElERV9OQVZJR0FUSU9OXHJcbiAgICAgICAgICB8IFZpZXcuU1lTVEVNX1VJX0ZMQUdfTEFZT1VUX0ZVTExTQ1JFRU5cclxuICAgICAgICAgIHwgVmlldy5TWVNURU1fVUlfRkxBR19ISURFX05BVklHQVRJT04gLy8gaGlkZSBuYXYgYmFyXHJcbiAgICAgICAgICB8IFZpZXcuU1lTVEVNX1VJX0ZMQUdfRlVMTFNDUkVFTiAvLyBoaWRlIHN0YXR1cyBiYXJcclxuICAgICAgICAgIHwgVmlldy5TWVNURU1fVUlfRkxBR19JTU1FUlNJVkVfU1RJQ0tZKTtcclxuICB9XHJcbiAgY2FtZXJhUHJldmlldy5vbkxvYWRlZChhcmdzLCBcInBsYWNlaG9sZGVyLXZpZXdcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkNyZWF0aW5nVmlldyhhcmdzOiBFdmVudERhdGEpIHtcclxuICBjaGFydHMuaW5pdEdyYXBoKHBhZ2UpO1xyXG4gIGlmKGFwcC5hbmRyb2lkKSB7XHJcbiAgICBwZXJtaXNzaW9ucy5yZXF1ZXN0UGVybWlzc2lvbihhbmRyb2lkW1wiTWFuaWZlc3RcIl0ucGVybWlzc2lvbi5DQU1FUkEsIFwiSSBuZWVkIHRoZXNlIHBlcm1pc3Npb25zIGZvciB0aGUgdmlld2ZpbmRlclwiKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICBjb25zb2xlLmxvZyhcIldvbyBIb28sIEkgaGF2ZSB0aGUgcG93ZXIhXCIpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChmdW5jdGlvbigpIHtcclxuICAgICAgIGNvbnNvbGUubG9nKFwiVWggb2gsIG5vIHBlcm1pc3Npb25zIC0gcGxhbiBCIHRpbWUhXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGlmKGFwcC5hbmRyb2lkKSBwYXJhbXMuaW5pdGlhbGl6ZSgpO1xyXG4gIGNhbWVyYVByZXZpZXcub25DcmVhdGluZ1ZpZXcodXBkYXRlQ2FsbGJhY2ssIGFyZ3MpO1xyXG4gIGlmIChhcHAuaW9zICE9PSB1bmRlZmluZWQpIHBhcmFtcy5pbml0aWFsaXplKCk7XHJcbiAgcm90VmVjdG9yLnN0YXJ0Um90VXBkYXRlcyhyb3RhdGlvbkNhbGxiYWNrLCAgeyBzZW5zb3JEZWxheTogXCJnYW1lXCIgfSk7XHJcbiAgLy8gZmlsdGVycyA9IG5ldyBJbWFnZUZpbHRlcnMoKTtcclxuICAvLyBmaWx0ZXJzLmNvbG9yRmlsdGVyKGRvdWJsZWxpbmUsIDAsIDAsIDApLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gIC8vICAgZG91YmxlbGluZS5pbWFnZVNvdXJjZSA9IHJlc3VsdDtcclxuICAvLyB9KTtcclxuICBjb25zdCBtYXhTaXplID0gY2FtZXJhUHJldmlldy5nZXRNYXhTaXplKCk7XHJcbiAgcGFyYW1zLnNldFZhcnMobWF4U2l6ZVswXSwgbWF4U2l6ZVsxXSk7XHJcbiAgbWVhc3VyZWRXaWR0aCA9IHBhcmFtcy5kZWdyZWVzMlBpeGVscyhPVVRFUl9DSVJDTEVfRElBTUVURVIpO1xyXG4gIC8vIGNvbnNvbGUubG9nKHBhcmFtcy5nZXRWZXJ0aWNhbEZPVigpICsgXCIgXCIgKyBwYXJhbXMuZ2V0SG9yaXpvbnRhbEZPVigpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFrZVNob3QoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgY2FtZXJhUHJldmlldy5vblRha2VTaG90KGFyZ3MpO1xyXG4gIGlzT24gPSAhaXNPbjtcclxuICBjYXB0dXJlYnRuLnRleHQgPSBpc09uPyBcIlN0b3BcIiA6IFwiUmVjb3JkXCI7XHJcbiAgaWYoaXNPbikge1xyXG4gICAgY2FwdHVyZWJ0bi50ZXh0ID0gXCJTdG9wXCI7XHJcbiAgICBjYXB0dXJlYnRuLmFuaW1hdGUoe1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG5ldyBjb2xvck1vZHVsZS5Db2xvcihcInJlZFwiKSxcclxuICAgICAgZHVyYXRpb246IDUwMFxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNhcHR1cmVidG4udGV4dCA9IFwiUmVjb3JkXCI7XHJcbiAgICBjYXB0dXJlYnRuLmFuaW1hdGUoe1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzFiNTY3NVwiLFxyXG4gICAgICBkdXJhdGlvbjogNTAwXHJcbiAgICB9KTtcclxuICB9XHJcbiAgY29uc29sZS5sb2coXCJlbDogXCIgKyB5KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcclxuICAgIGNyb3NzaGFpciA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJjcm9zc2hhaXJcIik7XHJcbiAgICBkb3VibGVsaW5lID0gcGFnZS5nZXRWaWV3QnlJZChcImRvdWJsZWxpbmVcIik7XHJcbiAgICB1cHBlclRleHQgPSBwYWdlLmdldFZpZXdCeUlkKFwidXBwZXJUZXh0XCIpO1xyXG4gICAgbG93ZXJUZXh0ID0gcGFnZS5nZXRWaWV3QnlJZChcImxvd2VyVGV4dFwiKTtcclxuICAgIGNhcHR1cmVidG4gPSBwYWdlLmdldFZpZXdCeUlkKFwiY2FwdHVyZWJ0blwiKTtcclxufVxyXG5cclxuYXBwLm9uKGFwcC5yZXN1bWVFdmVudCwgZnVuY3Rpb24oYXJncykge1xyXG4gIHJvdFZlY3Rvci5zdGFydFJvdFVwZGF0ZXMocm90YXRpb25DYWxsYmFjaywgIHsgc2Vuc29yRGVsYXk6IFwiZ2FtZVwiIH0pO1xyXG4gIGNhbWVyYVByZXZpZXcub25SZXN1bWUoKTtcclxuXHJcbn0pO1xyXG5hcHAub24oYXBwLnN1c3BlbmRFdmVudCwgZnVuY3Rpb24oYXJncykge1xyXG4gIGNhbWVyYVByZXZpZXcub25QYXVzZSgpO1xyXG4gIHJvdFZlY3Rvci5zdG9wUm90VXBkYXRlcygpO1xyXG4gIGNoYXJ0cy5vbkV4aXQoKTtcclxufSk7XHJcbmFwcC5vbihhcHAuZXhpdEV2ZW50LCBmdW5jdGlvbihhcmdzKSB7XHJcbiAgY29uc29sZS5sb2coXCJPbiBFeGl0dGluZ1wiKTtcclxuICByb3RWZWN0b3Iuc3RvcFJvdFVwZGF0ZXMoKTtcclxufSk7XHJcbiJdfQ==