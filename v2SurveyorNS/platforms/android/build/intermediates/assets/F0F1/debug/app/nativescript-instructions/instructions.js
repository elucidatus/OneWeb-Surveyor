"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// A quick implementation of instructions
var platform = require("platform");
var isStart = false;
var isEleAbove0 = false;
var isPressed = false;
var largeDeltaAz = false;
var oldAz = 0;
var page;
var pt1, pt2, pt3, pt4, pt5;
var currentView;
var translateY = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale;
// Function: triggers at the start of the application
function trigger1(mPage) {
    if (!isStart) {
        page = mPage;
        pt1 = page.getViewById("pt1");
        pt2 = page.getViewById("pt2");
        pt3 = page.getViewById("pt3");
        pt4 = page.getViewById("pt4");
        pt5 = page.getViewById("pt5");
        pt1.translateY = translateY;
        pt2.translateY = translateY;
        pt3.translateY = translateY;
        pt4.translateY = translateY;
        pt5.translateY = translateY;
        currentView = pt1;
    }
}
exports.trigger1 = trigger1;
// Function: triggers every update; dependent on elevation
function trigger2(ele) {
    if (!isEleAbove0) {
        isEleAbove0 = -ele > 0;
        if (isEleAbove0) {
            fadeaway(pt2);
        }
    }
    else if (-ele > 40) {
        pt5.opacity = 1;
    }
    else {
        pt5.opacity = 0;
    }
}
exports.trigger2 = trigger2;
// Function: triggers at the first click; dependent on button press
function trigger3(az) {
    if (!isPressed) {
        fadeaway(pt3);
        isEleAbove0 = true;
    }
    oldAz = az;
    isPressed = true;
}
exports.trigger3 = trigger3;
// Function: triggers every update; dependent on large delta azimuth
function trigger4(az) {
    if (!largeDeltaAz && isPressed) {
        largeDeltaAz = Math.abs(oldAz - az) > 20;
        if (largeDeltaAz) {
            end(pt3, pt4);
        }
    }
}
exports.trigger4 = trigger4;
// Function: animates the currentView away and animate the newView in
// Also sets the newView to the currentView
function fadeaway(newView) {
    return currentView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 1000
        });
        currentView = newView;
    });
}
// Function: used exclusively as a timed animation to hide, show, then hide again
// Also sets the newView to the currentView
function end(oldView, newView) {
    oldView.animate({
        opacity: 0,
        duration: 1000
    }).then(function () {
        newView.animate({
            opacity: 1,
            duration: 2000
        }).then(function () {
            newView.animate({
                opacity: 0,
                duration: 2000
            });
            currentView = newView;
        });
    });
}
// Function: hides a view
// Does not set/reset the currentView
function hide(view) {
    view.animate({
        opacity: 0,
        duration: 1000
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdHJ1Y3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQXlDO0FBQ3pDLG1DQUFxQztBQUVyQyxJQUFJLE9BQU8sR0FBWSxLQUFLLENBQUM7QUFDN0IsSUFBSSxXQUFXLEdBQVksS0FBSyxDQUFDO0FBQ2pDLElBQUksU0FBUyxHQUFZLEtBQUssQ0FBQztBQUMvQixJQUFJLFlBQVksR0FBWSxLQUFLLENBQUM7QUFDbEMsSUFBSSxLQUFLLEdBQVcsQ0FBQyxDQUFDO0FBRXRCLElBQUksSUFBSSxDQUFDO0FBQ1QsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0FBQzVCLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBRWpHLHFEQUFxRDtBQUNyRCxrQkFBeUIsS0FBSztJQUM1QixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIs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LGNBQWMsSUFBSTtJQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ1gsT0FBTyxFQUFFLENBQUM7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIHF1aWNrIGltcGxlbWVudGF0aW9uIG9mIGluc3RydWN0aW9uc1xyXG5pbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcclxuXHJcbmxldCBpc1N0YXJ0OiBib29sZWFuID0gZmFsc2U7XHJcbmxldCBpc0VsZUFib3ZlMDogYm9vbGVhbiA9IGZhbHNlO1xyXG5sZXQgaXNQcmVzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbmxldCBsYXJnZURlbHRhQXo6IGJvb2xlYW4gPSBmYWxzZTtcclxubGV0IG9sZEF6OiBudW1iZXIgPSAwO1xyXG5cclxubGV0IHBhZ2U7XHJcbmxldCBwdDEsIHB0MiwgcHQzLCBwdDQsIHB0NTtcclxubGV0IGN1cnJlbnRWaWV3O1xyXG5jb25zdCB0cmFuc2xhdGVZID0gcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uaGVpZ2h0UGl4ZWxzIC8gOCAvcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7XHJcblxyXG4vLyBGdW5jdGlvbjogdHJpZ2dlcnMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhcHBsaWNhdGlvblxyXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlcjEobVBhZ2UpIHtcclxuICBpZighaXNTdGFydCkge1xyXG4gICAgcGFnZSA9IG1QYWdlO1xyXG4gICAgcHQxID0gcGFnZS5nZXRWaWV3QnlJZChcInB0MVwiKTtcclxuICAgIHB0MiA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDJcIik7XHJcbiAgICBwdDMgPSBwYWdlLmdldFZpZXdCeUlkKFwicHQzXCIpO1xyXG4gICAgcHQ0ID0gcGFnZS5nZXRWaWV3QnlJZChcInB0NFwiKTtcclxuICAgIHB0NSA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJwdDVcIik7XHJcbiAgICBwdDEudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XHJcbiAgICBwdDIudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XHJcbiAgICBwdDMudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XHJcbiAgICBwdDQudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XHJcbiAgICBwdDUudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XHJcbiAgICBjdXJyZW50VmlldyA9IHB0MTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uOiB0cmlnZ2VycyBldmVyeSB1cGRhdGU7IGRlcGVuZGVudCBvbiBlbGV2YXRpb25cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIyKGVsZSkge1xyXG4gIGlmKCFpc0VsZUFib3ZlMCkge1xyXG4gICAgaXNFbGVBYm92ZTAgPSAtZWxlID4gMDtcclxuICAgIGlmKGlzRWxlQWJvdmUwKSB7XHJcbiAgICAgIGZhZGVhd2F5KHB0Mik7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmKC1lbGUgPiA0MCkge1xyXG4gICAgcHQ1Lm9wYWNpdHkgPSAxO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwdDUub3BhY2l0eSA9IDA7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBGdW5jdGlvbjogdHJpZ2dlcnMgYXQgdGhlIGZpcnN0IGNsaWNrOyBkZXBlbmRlbnQgb24gYnV0dG9uIHByZXNzXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyMyhheikge1xyXG4gIGlmKCFpc1ByZXNzZWQpIHtcclxuICAgIGZhZGVhd2F5KHB0Myk7XHJcbiAgICBpc0VsZUFib3ZlMCA9IHRydWU7XHJcbiAgfVxyXG4gIG9sZEF6ID0gYXo7XHJcbiAgaXNQcmVzc2VkID0gdHJ1ZTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb246IHRyaWdnZXJzIGV2ZXJ5IHVwZGF0ZTsgZGVwZW5kZW50IG9uIGxhcmdlIGRlbHRhIGF6aW11dGhcclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXI0KGF6KSB7XHJcbiAgaWYoIWxhcmdlRGVsdGFBeiAmJiBpc1ByZXNzZWQpe1xyXG4gICAgbGFyZ2VEZWx0YUF6ID0gTWF0aC5hYnMob2xkQXotYXopID4gMjA7XHJcbiAgICBpZihsYXJnZURlbHRhQXopIHtcclxuICAgICAgZW5kKHB0MywgcHQ0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uOiBhbmltYXRlcyB0aGUgY3VycmVudFZpZXcgYXdheSBhbmQgYW5pbWF0ZSB0aGUgbmV3VmlldyBpblxyXG4vLyBBbHNvIHNldHMgdGhlIG5ld1ZpZXcgdG8gdGhlIGN1cnJlbnRWaWV3XHJcbmZ1bmN0aW9uIGZhZGVhd2F5KG5ld1ZpZXcpIHtcclxuICByZXR1cm4gY3VycmVudFZpZXcuYW5pbWF0ZSh7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgZHVyYXRpb246IDEwMDBcclxuICB9KS50aGVuKCgpPT57XHJcbiAgICBuZXdWaWV3LmFuaW1hdGUoe1xyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBkdXJhdGlvbjogMTAwMFxyXG4gICAgfSk7XHJcbiAgICBjdXJyZW50VmlldyA9IG5ld1ZpZXc7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uOiB1c2VkIGV4Y2x1c2l2ZWx5IGFzIGEgdGltZWQgYW5pbWF0aW9uIHRvIGhpZGUsIHNob3csIHRoZW4gaGlkZSBhZ2FpblxyXG4vLyBBbHNvIHNldHMgdGhlIG5ld1ZpZXcgdG8gdGhlIGN1cnJlbnRWaWV3XHJcbmZ1bmN0aW9uIGVuZChvbGRWaWV3LCBuZXdWaWV3KSB7XHJcbiAgb2xkVmlldy5hbmltYXRlKHtcclxuICAgIG9wYWNpdHk6IDAsXHJcbiAgICBkdXJhdGlvbjogMTAwMFxyXG4gIH0pLnRoZW4oKCkgPT57XHJcbiAgICBuZXdWaWV3LmFuaW1hdGUoe1xyXG4gICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICBkdXJhdGlvbjogMjAwMFxyXG4gICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgIG5ld1ZpZXcuYW5pbWF0ZSh7XHJcbiAgICAgICAgb3BhY2l0eTowLFxyXG4gICAgICAgIGR1cmF0aW9uOiAyMDAwXHJcbiAgICAgIH0pO1xyXG4gICAgICBjdXJyZW50VmlldyA9IG5ld1ZpZXc7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gRnVuY3Rpb246IGhpZGVzIGEgdmlld1xyXG4vLyBEb2VzIG5vdCBzZXQvcmVzZXQgdGhlIGN1cnJlbnRWaWV3XHJcbmZ1bmN0aW9uIGhpZGUodmlldykge1xyXG4gIHZpZXcuYW5pbWF0ZSh7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgZHVyYXRpb246IDEwMDBcclxuICB9KTtcclxufVxyXG4iXX0=