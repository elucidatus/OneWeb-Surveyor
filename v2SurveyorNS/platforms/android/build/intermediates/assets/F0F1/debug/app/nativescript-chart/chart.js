"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var page;
var ele = [];
var maxEle;
var minEle;
var timer;
var width = platform.screen.mainScreen.widthPixels / 360;
var maxHeight = platform.screen.mainScreen.heightPixels / 4;
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    console.log("l0 is " + page.getViewById("l0"));
    maxEle = 60;
    minEle = 0;
    timer = 10;
    page.addCss("#graph" + " {height: " + maxHeight + "}");
    for (var i = 0; i < 360; i++) {
        console.log("dealing with: " + i);
        ele.push((maxEle + minEle) / 2);
        var heightPercent = (ele[i] - minEle) / (maxEle - minEle);
        // page.addCss("#l" + i + " {height: " + heightPercent*maxHeight + "}");
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation) {
    var az = Math.floor(azimuth) + 180;
    ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
    var heightPercent = (ele[az] - minEle) / (maxEle - minEle);
    var currentView = page.getViewById("l" + az);
    currentView.animate({
        translate: {
            x: 0,
            y: 100 / 2
        },
        scale: {
            x: 1,
            y: heightPercent
        }
    });
}
exports.updateGraph = updateGraph;
function onExit() {
    // bmp.dispose();
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUlyQyxJQUFJLElBQUksQ0FBQztBQUNULElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztBQUV6QixJQUFJLE1BQWUsQ0FBQztBQUNwQixJQUFJLE1BQWUsQ0FBQztBQUNwQixJQUFJLEtBQWMsQ0FBQztBQUVuQixJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQzNELElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7QUFFOUQsbUJBQTBCLE1BQU07SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2xDLElBQUksR0FBRyxNQUFNLENBQUM7SUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsWUFBWSxHQUFHLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN2RCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFNLGFBQWEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMxRCx3RUFBd0U7SUFDMUUsQ0FBQztBQUNILENBQUM7QUFkRCw4QkFjQztBQUVELHFCQUE0QixPQUFPLEVBQUUsU0FBUztJQUM1QyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNyQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUMsTUFBTSxHQUFFLE1BQU0sR0FBRSxDQUFDLFNBQVMsR0FBQyxNQUFNLEdBQUUsTUFBTSxHQUFFLENBQUMsU0FBUyxDQUFDO0lBQzNFLElBQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFDLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDbEIsU0FBUyxFQUFFO1lBQ1QsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsR0FBRyxHQUFDLENBQUM7U0FDVDtRQUNELEtBQUssRUFBRTtZQUNMLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLGFBQWE7U0FDakI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBZkQsa0NBZUM7QUFDRDtJQUNFLGlCQUFpQjtBQUNuQixDQUFDO0FBRkQsd0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tIFwicGxhdGZvcm1cIjtcclxuaW1wb3J0ICogYXMga25vd25Db2xvcnMgZnJvbSBcImNvbG9yL2tub3duLWNvbG9yc1wiO1xyXG5pbXBvcnQgKiBhcyBJbWFnZU1vZHVsZSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZVwiO1xyXG5cclxubGV0IHBhZ2U7XHJcbmNvbnN0IGVsZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbmxldCBtYXhFbGUgOiBudW1iZXI7XHJcbmxldCBtaW5FbGUgOiBudW1iZXI7XHJcbmxldCB0aW1lciA6IG51bWJlcjtcclxuXHJcbmNvbnN0IHdpZHRoID0gcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4ud2lkdGhQaXhlbHMgLyAzNjA7XHJcbmNvbnN0IG1heEhlaWdodCA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyAvIDQ7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdEdyYXBoKG15UGFnZSkge1xyXG4gIGNvbnNvbGUubG9nKFwiRW50ZXJpbmcgaW5pdEdyYXBoXCIpO1xyXG4gIHBhZ2UgPSBteVBhZ2U7XHJcbiAgY29uc29sZS5sb2coXCJsMCBpcyBcIiArIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsMFwiKSk7XHJcbiAgbWF4RWxlID0gNjA7XHJcbiAgbWluRWxlID0gMDtcclxuICB0aW1lciA9IDEwO1xyXG4gIHBhZ2UuYWRkQ3NzKFwiI2dyYXBoXCIgKyBcIiB7aGVpZ2h0OiBcIiArIG1heEhlaWdodCArIFwifVwiKTtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgMzYwOyBpKyspIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVhbGluZyB3aXRoOiBcIisgaSk7XHJcbiAgICBlbGUucHVzaCgobWF4RWxlKyBtaW5FbGUpLzIpO1xyXG4gICAgY29uc3QgaGVpZ2h0UGVyY2VudCA9IChlbGVbaV0gLSBtaW5FbGUpLyhtYXhFbGUgLSBtaW5FbGUpO1xyXG4gICAgLy8gcGFnZS5hZGRDc3MoXCIjbFwiICsgaSArIFwiIHtoZWlnaHQ6IFwiICsgaGVpZ2h0UGVyY2VudCptYXhIZWlnaHQgKyBcIn1cIik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlR3JhcGgoYXppbXV0aCwgZWxldmF0aW9uKSB7XHJcbiAgY29uc3QgYXogPSBNYXRoLmZsb29yKGF6aW11dGgpICsgMTgwO1xyXG4gIGVsZVthel0gPSAtZWxldmF0aW9uPG1pbkVsZT8gbWluRWxlOiAtZWxldmF0aW9uPm1heEVsZT8gbWF4RWxlOiAtZWxldmF0aW9uO1xyXG4gIGNvbnN0IGhlaWdodFBlcmNlbnQgPSAoZWxlW2F6XSAtIG1pbkVsZSkvKG1heEVsZS1taW5FbGUpO1xyXG4gIGNvbnN0IGN1cnJlbnRWaWV3ID0gcGFnZS5nZXRWaWV3QnlJZChcImxcIitheik7XHJcbiAgY3VycmVudFZpZXcuYW5pbWF0ZSh7XHJcbiAgICB0cmFuc2xhdGU6IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMTAwLzJcclxuICAgIH0sXHJcbiAgICBzY2FsZToge1xyXG4gICAgICB4OiAxLFxyXG4gICAgICB5OiBoZWlnaHRQZXJjZW50XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRXhpdCgpIHtcclxuICAvLyBibXAuZGlzcG9zZSgpO1xyXG59XHJcbiJdfQ==