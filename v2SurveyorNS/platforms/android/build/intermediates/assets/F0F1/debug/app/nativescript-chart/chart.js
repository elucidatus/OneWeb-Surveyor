"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform = require("platform");
var page;
var ele = [];
var maxEle;
var minEle;
var targetEle;
var prevIndex;
var smoothingRange; // when there is a data skip in the azimuth, we want to smooth it out linearly. This is the max range of the smoothing. Any jumps more than 20 will not be smoothed
var width = platform.screen.mainScreen.widthPixels / 360 / platform.screen.mainScreen.scale; // in dp
var maxHeight = platform.screen.mainScreen.heightPixels / 8 / platform.screen.mainScreen.scale; // in dp
function initGraph(myPage) {
    console.log("Entering initGraph");
    page = myPage;
    maxEle = 60;
    minEle = 0;
    smoothingRange = 20;
    page.getViewById("graph").height = maxHeight;
    var ltarget = page.getViewById("ltarget");
    ltarget.height = width;
    //console.log("ltarget: " + ltarget);
    //console.dir(ltarget);
    ltarget.translateY = ele2Percent(targetEle);
    for (var i = 0; i < 360; i++) {
        ele.push((maxEle + minEle) / 2);
        page.getViewById("l" + i).height = maxHeight * ele2Percent(ele[i]);
    }
}
exports.initGraph = initGraph;
function updateGraph(azimuth, elevation) {
    var az = Math.floor(azimuth) + 180;
    ele[az] = -elevation < minEle ? minEle : -elevation > maxEle ? maxEle : -elevation;
    var currentView = page.getViewById("l" + az);
    currentView.height = maxHeight * ele2Percent(ele[az]);
    var dif = az - prevIndex;
    if (Math.abs(dif) > 1 && Math.abs(dif) < smoothingRange) {
        var start = void 0, end = void 0;
        if (dif > 0) {
            start = prevIndex + 1;
            end = az;
        }
        else {
            start = az + 1;
            end = prevIndex;
        }
        for (var i = start; i < end; i++) {
            ele[i] = ele[start - 1] + (i - start + 1) / (dif - 1) * (ele[az] - ele[prevIndex]);
            page.getViewById("l" + (i)).height = maxHeight * ele2Percent(ele[i]);
        }
    }
    prevIndex = az;
}
exports.updateGraph = updateGraph;
function ele2Percent(elevation) {
    return (elevation - minEle) / (maxEle - minEle);
}
function onExit() {
}
exports.onExit = onExit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUlyQyxJQUFJLElBQUksQ0FBQztBQUNULElBQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztBQUV6QixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLE1BQWMsQ0FBQztBQUNuQixJQUFJLFNBQWlCLENBQUM7QUFDdEIsSUFBSSxTQUFpQixDQUFDO0FBQ3RCLElBQUksY0FBc0IsQ0FBQyxDQUFDLG1LQUFtSztBQUUvTCxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVE7QUFDdEcsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0FBRXpHLG1CQUEwQixNQUFNO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNsQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2QsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUM3QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLHFDQUFxQztJQUNyQyx1QkFBdUI7SUFDdkIsT0FBTyxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFNUMsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFFLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7QUFDSCxDQUFDO0FBakJELDhCQWlCQztBQUVELHFCQUE0QixPQUFPLEVBQUUsU0FBUztJQUM1QyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNyQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUMsTUFBTSxHQUFFLE1BQU0sR0FBRSxDQUFDLFNBQVMsR0FBQyxNQUFNLEdBQUUsTUFBTSxHQUFFLENBQUMsU0FBUyxDQUFDO0lBRTNFLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV0RCxJQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUMsU0FBUyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLEtBQUssU0FBQSxFQUFFLEdBQUcsU0FBQSxDQUFDO1FBQ2YsRUFBRSxDQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxLQUFLLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztZQUN0QixHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sS0FBSyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDZixHQUFHLEdBQUcsU0FBUyxDQUFDO1FBQ2xCLENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsQ0FBQztJQUNILENBQUM7SUFDRCxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUF2QkQsa0NBdUJDO0FBRUQscUJBQXFCLFNBQVM7SUFDNUIsTUFBTSxDQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFDLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRDtBQUNBLENBQUM7QUFERCx3QkFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gXCJwbGF0Zm9ybVwiO1xyXG5pbXBvcnQgKiBhcyBrbm93bkNvbG9ycyBmcm9tIFwiY29sb3Iva25vd24tY29sb3JzXCI7XHJcbmltcG9ydCAqIGFzIEltYWdlTW9kdWxlIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XHJcblxyXG5sZXQgcGFnZTtcclxuY29uc3QgZWxlOiBudW1iZXJbXSA9IFtdO1xyXG5cclxubGV0IG1heEVsZTogbnVtYmVyO1xyXG5sZXQgbWluRWxlOiBudW1iZXI7XHJcbmxldCB0YXJnZXRFbGU6IG51bWJlcjtcclxubGV0IHByZXZJbmRleDogbnVtYmVyO1xyXG5sZXQgc21vb3RoaW5nUmFuZ2U6IG51bWJlcjsgLy8gd2hlbiB0aGVyZSBpcyBhIGRhdGEgc2tpcCBpbiB0aGUgYXppbXV0aCwgd2Ugd2FudCB0byBzbW9vdGggaXQgb3V0IGxpbmVhcmx5LiBUaGlzIGlzIHRoZSBtYXggcmFuZ2Ugb2YgdGhlIHNtb290aGluZy4gQW55IGp1bXBzIG1vcmUgdGhhbiAyMCB3aWxsIG5vdCBiZSBzbW9vdGhlZFxyXG5cclxuY29uc3Qgd2lkdGggPSBwbGF0Zm9ybS5zY3JlZW4ubWFpblNjcmVlbi53aWR0aFBpeGVscyAvIDM2MCAvcGxhdGZvcm0uc2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7IC8vIGluIGRwXHJcbmNvbnN0IG1heEhlaWdodCA9IHBsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLmhlaWdodFBpeGVscyAvIDggL3BsYXRmb3JtLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlOyAvLyBpbiBkcFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRHcmFwaChteVBhZ2UpIHtcclxuICBjb25zb2xlLmxvZyhcIkVudGVyaW5nIGluaXRHcmFwaFwiKTtcclxuICBwYWdlID0gbXlQYWdlO1xyXG4gIG1heEVsZSA9IDYwO1xyXG4gIG1pbkVsZSA9IDA7XHJcbiAgc21vb3RoaW5nUmFuZ2UgPSAyMDtcclxuICBwYWdlLmdldFZpZXdCeUlkKFwiZ3JhcGhcIikuaGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICBjb25zdCBsdGFyZ2V0ID0gcGFnZS5nZXRWaWV3QnlJZChcImx0YXJnZXRcIik7XHJcbiAgbHRhcmdldC5oZWlnaHQgPSB3aWR0aDtcclxuICAvL2NvbnNvbGUubG9nKFwibHRhcmdldDogXCIgKyBsdGFyZ2V0KTtcclxuICAvL2NvbnNvbGUuZGlyKGx0YXJnZXQpO1xyXG4gIGx0YXJnZXQudHJhbnNsYXRlWSA9IGVsZTJQZXJjZW50KHRhcmdldEVsZSk7XHJcblxyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCAzNjA7IGkrKykge1xyXG4gICAgZWxlLnB1c2goKG1heEVsZSsgbWluRWxlKS8yKTtcclxuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoXCJsXCIraSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVHcmFwaChhemltdXRoLCBlbGV2YXRpb24pIHtcclxuICBjb25zdCBheiA9IE1hdGguZmxvb3IoYXppbXV0aCkgKyAxODA7XHJcbiAgZWxlW2F6XSA9IC1lbGV2YXRpb248bWluRWxlPyBtaW5FbGU6IC1lbGV2YXRpb24+bWF4RWxlPyBtYXhFbGU6IC1lbGV2YXRpb247XHJcblxyXG4gIGNvbnN0IGN1cnJlbnRWaWV3ID0gcGFnZS5nZXRWaWV3QnlJZChcImxcIitheik7XHJcbiAgY3VycmVudFZpZXcuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2F6XSk7XHJcblxyXG4gIGNvbnN0IGRpZiA9IGF6LXByZXZJbmRleDtcclxuICBpZihNYXRoLmFicyhkaWYpID4gMSAmJiBNYXRoLmFicyhkaWYpIDwgc21vb3RoaW5nUmFuZ2UpIHtcclxuICAgIGxldCBzdGFydCwgZW5kO1xyXG4gICAgaWYoZGlmID4gMCkge1xyXG4gICAgICBzdGFydCA9IHByZXZJbmRleCArIDE7XHJcbiAgICAgIGVuZCA9IGF6O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhcnQgPSBheiArIDE7XHJcbiAgICAgIGVuZCA9IHByZXZJbmRleDtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICAgIGVsZVtpXSA9IGVsZVtzdGFydC0xXSArIChpIC0gc3RhcnQrMSkgLyAoZGlmLTEpICogKGVsZVthel0tZWxlW3ByZXZJbmRleF0pO1xyXG4gICAgICBwYWdlLmdldFZpZXdCeUlkKFwibFwiKyhpKSkuaGVpZ2h0ID0gbWF4SGVpZ2h0ICogZWxlMlBlcmNlbnQoZWxlW2ldKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJldkluZGV4ID0gYXo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZTJQZXJjZW50KGVsZXZhdGlvbikge1xyXG4gIHJldHVybiAoZWxldmF0aW9uIC0gbWluRWxlKS8obWF4RWxlLW1pbkVsZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkV4aXQoKSB7XHJcbn1cclxuIl19